<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Report</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1BarCode.BarDirectionEnum">
            <summary>
            Specifies the direction of the barcode
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Normal">
            <summary>
            The barcode is rendered in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Up">
            <summary>
            The barcode is rendered from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Down">
            <summary>
            The barcode is rendered from the top down.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.CodeTypeEnum">
            <summary>
            Specifies the type of barcode to be generated by the C1BarCode control.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1BarCode.CodeTypeEnum"/> enumeration represents the different types 
            of barcode that can be generated by the <see cref="T:C1.Win.C1BarCode.C1BarCode"/> control.</para>
            <para>Some types of barcode can be used to represent alphanumeric values, 
            others can only represent numeric values.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code39">
            <summary>
            Code 39 is an alpha-numeric encoding also known as 3 of 9 and LOGMARS.
            This was the first alphanumeric symbology developed, and is one of the
            most widely used encodings.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code93">
            <summary>
            Code 93 is an alpha-numeric encoding that is slightly denser than code 39.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code128">
            <summary>
            Code 128 is a very high density alpha-numeric bar code. It will use the 
            least amount of space of any current 1-D symbology for symbols with 6 
            characters or more. 
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.CodeI2of5">
            <summary>
            Code I2of5 is a numeric encoding. The symbol can be as long as necessary 
            to store the encoded data.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Codabar">
            <summary>
            Codabar may encode 16 different characters (0 through 9 plus -$:/.+), 
            plus an additional 4 start/stop characters (A through D). Codabar
            is used by some US blood banks, photo labs, and on FedEx airbills. 
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.PostNet">
            <summary>
            PostNet is a numeric encoding used by the US postal service. It differs 
            from most others in that it is based on the height of the bars rather than
            on their width.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Ean13">
            <summary>
            EAN-13 was implemented by the International Article Numbering Association (EAN)
            in Europe. EAN-13 encodes a 12-digit code that consists of a 2 digit system code
            followed by a 5 digit manufacturer code and a 5-digit product code. The 12-digit 
            code is followed by a checksum digit (automatically added by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Ean8">
            <summary>
            EAN-8 provides a short barcode for small packages. It encodes a 7-digit
            code that consists of a 2 or 3 digit system code followed by a 4 or 5
            digit product code. The 7-digit code is followed by a checksum digit
            (automatically added by the control).
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.C1BarCode">
            <summary>
            Creates barcode representations of alphanumeric values.
            </summary>
            <remarks>
            <para>To use the C1BarCode control, set the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> 
            property to the type of encoding you want to use, then set the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property to the value you want to encode.</para>
            <para>The control will show the barcode image. If you want to include the barcode in
            a document, use the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property to retrieve a 
            resolution-independent image of the barcode.</para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1BarCode.C1BarCode"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <remarks>
            The background color only applies to the control. The barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> 
            property always has a transparent background.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.ForeColor">
            <summary>
            Gets or sets the foreground color for the control.
            </summary>
            <remarks>
            The foreground color applies to the control and also to the barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> 
            property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Font">
            <summary>
            Gets or sets the Font used to display the value of the Text property.
            </summary>
            <remarks>
            If the <see cref="P:C1.Win.C1BarCode.C1BarCode.ShowText"/> property is set to true, then the value 
            of the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property is displayed centered along the 
            bottom of the barcode image using the given font.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.ShowText">
            <summary>
            Gets or sets whether the value of the Text property should be displayed along with the barcode image.
            </summary>
            <remarks>
            By default, the control will show only the barcode image. To include a textual
            representation of the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property, set the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.ShowText"/> property to True and set the <see cref="P:C1.Win.C1BarCode.C1BarCode.Font"/> property 
            to the Font to be used for the textual display.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Text">
            <summary>
            Gets or sets the value that is encoded as a barcode image.
            </summary>
            <remarks>
            <para>Some encodings support alpha-numeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="T:C1.Win.C1BarCode.CodeTypeEnum"/> enumeration 
            for details.</para>
            <para>If you use characters that are invalid for the current encoding, the
            control will display a blank image.</para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.CodeType">
            <summary>
            Gets or sets the type of encoding to use when generating the barcode image.
            </summary>
            <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property to generate the barcode image 
            displayed in the control. The barcode image is also available through the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property.
            </remarks>
            <example>This sample shows how to use the CodeType property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarNarrow">
            <summary>
            Gets or sets the width of the narrow bars in screen pixels.
            </summary>
            <remarks>
            By default, narrow bars are one screen pixel wide (1/96") and wide bars 
            are two pixels wide (1/96"). You should never have to change these values,
            they are exposed only in case you need to make adjustments for special
            barcode reader hardware.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarWide">
            <summary>
            Gets or sets the width of the wide bars in screen pixels.
            </summary>
            <remarks>
            By default, narrow bars are one screen pixel wide (1/96") and wide bars 
            are two pixels wide (1/96"). You should never have to change these values,
            they are exposed only in case you need to make adjustments for special
            barcode reader hardware.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarHeight">
            <summary>
            Gets or sets the height of the bars in screen pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.SizeMode">
            <summary>
            Gets or sets how the barcode image is displayed within the control.
            </summary>
            <remarks>
            <para>This property only affects how the barcode is displayed within
            the control. It has no effect on the actual barcode image, as returned by
            the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property.</para>
            <para>In most applications, you will either center or left-align the barcode
            image within the control. Although stretching the image is possible, it may
            make it unreadable for some barcode readers.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarDirection">
            <summary>
            Gets or sets the direction of the barcode.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Image">
            <summary>
            Gets an image of the barcode that represents the value in the Text property,
            obtained using the encoding specified by the CodeType property.
            </summary>
            <remarks>
            <para>The Image property returns an enhanced metafile that can be inserted in 
            reports and other documents. If the value stored in the Text property is
            invalid for the current encoding, the image returned is blank.</para>
            <para>Although the barcode image returned by the control is scalable, the default
            size is optimal for common barcode readers. Keep in mind that if you stretch
            the image and make it very large or very small, it may become unreadable to
            some readers.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder128">
            <summary>
            Encoder128
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderBase">
            <summary>
            EncoderBase
            Base class for 1-d barcode encoders
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder39">
            <summary>
            Encoder39
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder93">
            <summary>
            Encoder93
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderCodabar">
            <summary>
            EncoderCodabar
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderEan13">
            <summary>
            EncoderEan13
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderEan8">
            <summary>
            EncoderEan8
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderI2of5">
            <summary>
            EncoderI2of5
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderPostNet">
            <summary>
            EncoderPostNET
            todo: ignore widths, try 22 bars/inch
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Design.PictureAlignControl">
            <summary>
            Summary description for PictureAlignControl.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureAlignControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureAlignControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Design.ReportDesigner">
            <summary>
            Summary description for ReportDesigner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Design.ReportPickerForm">
            <summary>
            Summary description for ReportPickerForm.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.Design.ReportPickerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.Design.ReportPickerForm._staticFileName">
            <summary>
            Members
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.ReportPickerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.ReportPickerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Design.ScriptEditorForm">
            <summary>
            Summary description for ScriptEditorForm.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.Design.ScriptEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.ScriptEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.ScriptEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Design.TextAlignControl">
            <summary>
            Summary description for TextAlignControl.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextAlignControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextAlignControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Design.ExpressionEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit VBScript expressions.
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.ExpressionEditor"/> shows a modal dialog that allows users to enter <b>VBScript</b> 
            expressions.</para>
            <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor"/> in classes that derive from <see cref="T:C1.Win.C1Report.Field"/> 
            to provide VBScript expression editing.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.ExpressionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.ExpressionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.Modal</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.ExpressionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A string containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.StatementEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit VBScript statements.
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.StatementEditor"/> shows a modal dialog that allows users to enter <b>VBScript</b> 
            statements.</para>
            <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor"/> in classes that derive from <see cref="T:C1.Win.C1Report.Field"/> 
            to provide VBScript statement editing.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.StatementEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.StatementEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.Modal</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.StatementEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A string containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.DataSourceEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit <see cref="T:C1.Win.C1Report.DataSource"/> properties.
            </summary>
            <remarks>
            This editor calls a delegate on the report object. Report designers can provide a delegate and show 
            their custom UI to use for editing the data source.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.DataSourceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by <see cref="M:C1.Win.C1Report.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by <see cref="M:C1.Win.C1Report.Design.DataSourceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"/>.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.LayoutEditor">
            <summary>
            Shows a page setup dialog where the use can pick the paper size, orientation, and margins.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.LayoutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.LayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates 
            the style of editor used by <see cref="M:C1.Win.C1Report.Design.LayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.LayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by <see cref="M:C1.Win.C1Report.Design.LayoutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"/>.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.PageUnitConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to edit measurements.
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.PageUnitConverter"/> converts units (in, ", pt, pix, cm, mm) into 
            twips. For example, if the user types "2in" into the property grid, the 
            converter will automatically convert that into 2880 twips).</para>
            <para>You can use this <see cref="T:System.ComponentModel.TypeConverter"/> in classes that derive from
            <see cref="T:C1.Win.C1Report.Field"/> to provide properties that represent measurements.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.PageUnitConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>A <see cref="T:System.Double"/> value that represents the converted value expressed in twips.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.FormatConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to edit formatting strings.
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.FormatConverter"/> provides a list of commonly used formatting strings.
            The user can select one or type his own.</para>
            <para>You can use this <see cref="T:System.ComponentModel.TypeConverter"/> in classes that derive from
            <see cref="T:C1.Win.C1Report.Field"/> to provide properties that represent formatting strings.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns true to indicate that this object supports a standard set of values that can be picked from a list.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns false to indicate that the collection of standard values returned from <see cref="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> 
            is not an exclusive list (the user can type custom formats that are not on the list).
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard formats.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>A list containing the most common formatting strings.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.TextAlignEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit text alignment properties 
            (properties of type <see cref="T:C1.Win.C1Report.FieldAlignEnum"/>).
            </summary>
            <remarks>
            <para>This editor shows a drop-down control that allows users to visually select text alignment options.</para>
            <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor"/> in classes that derive from <see cref="T:C1.Win.C1Report.Field"/> to provide 
            text alignment editing.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextAlignEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.TextAlignEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextAlignEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.TextAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A <see cref="T:C1.Win.C1Report.FieldAlignEnum"/> value containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.PictureAlignEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit image alignment properties 
            (properties of type <see cref="T:C1.Win.C1Report.PictureAlignEnum"/>).
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.PictureAlignEditor"/> shows a drop-down control that allows users to visually select 
            image alignment options.</para>
            <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor"/> in classes that derive from <see cref="T:C1.Win.C1Report.Field"/> to 
            provide image alignment editing.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureAlignEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.PictureAlignEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureAlignEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.PictureAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A <see cref="T:C1.Win.C1Report.PictureAlignEnum"/> value containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.TextFieldEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> that provides a list of available text field names plus the option to type in an 
            expression using a script editor.
            </summary>
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit properties that represent report field names.
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.TextFieldEditor"/> shows a drop-down list that allows users to select report field names.</para>
            <para>The list includes a (Script Editor...) option that shows a dialog where the user can type complex expressions.</para>
            <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor"/> in classes that derive from <see cref="T:C1.Win.C1Report.Field"/> to provide properties 
            that should be set to report field names.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextFieldEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.TextFieldEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextFieldEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.TextFieldEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.TextFieldEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A string containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.SubreportFieldConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to edit properties that represent reports.
            </summary>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.Design.SubreportFieldConverter"/> provides a list of available reports.</para>
            <para>You can use this <see cref="T:System.ComponentModel.TypeConverter"/> in classes that derive from <see cref="T:C1.Win.C1Report.Field"/> to 
            edit properties that represent reports.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>True if <paramref name="type"/> is string, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>A <see cref="T:C1.Win.C1Report.C1Report"/> object with the specified name, or null if no report by the specified name 
            could be found in the report definition file.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>True if <paramref name="type"/> is string, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>The name of the report if <paramref name="type"/> is string, null otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True because <see cref="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> should be called to find the properties of this object.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from 
            <see cref="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> is an exclusive list of possible values, 
            using the specified context.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned 
            from <see cref="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> is an exhaustive list of possible values.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of report names.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be 
            used to extract additional information about the environment from which this converter is invoked. 
            This parameter or properties of this parameter can be a null reference (Nothing in Visual Basic).</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.PictureHolderEditor">
            <summary>
            PictureHolderEditor provides a list of available text image names plus the option to load an image from a file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureHolderEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.PictureHolderEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureHolderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.PictureHolderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by <see cref="M:C1.Win.C1Report.Design.PictureHolderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Design.PictureHolderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A string containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Report.Design.ReportEditor">
            <summary>
            ReportEditor shows the report designer at design time.
            </summary>
            <remarks>
            The user can edit the report definition, including setting data sources available on the form.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.Design.Util">
            <summary>
            static utilities
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffReader">
            <summary>
            Reads a biff record into a memory stream, exposes the record code
            and provides methods like a binary reader so callers can get the
            data, plus methods for reading Excel-specific elements like
            RK numbers and biff strings.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffWriter">
            <summary>
            Writes biff records. call the Open method to start the record,
            then BinaryWriter-like commands to write the record data, which 
            gets cached in a memory stream. call the Close method to write
            the record header (code and data size) plus the actual record 
            data.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordBOF">
            <summary>
            First record in the biff file
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordStyle">
            <summary>
            These are the 6 main Excel styles (Normal, etc), not to be confused with the XF records
            which we call styles and excel calls eXtended Format.
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.C1XLBook"/> class. The 
            new workbook contains a single empty <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Clear">
            <summary>
            Clears the <see cref="T:C1.C1Excel.C1XLBook"/>, restoring the initial state with a single
            <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
            <remarks>
            The <see cref="M:C1.C1Excel.C1XLBook.Clear"/> method restores the <see cref="T:C1.C1Excel.C1XLBook"/> object
            to its initial state, with a single empty sheet called "Sheet1" and the 
            <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> set to 10pt Arial.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String)">
            <summary>
            Loads a complete <see cref="T:C1.C1Excel.C1XLBook"/> from an xls file.
            </summary>
            <param name="fileName">Name of the xls file to load.</param>
            <remarks>
            If the file doesn't exist, is locked, or is not a valid Excel 
            file, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,System.Boolean)">
            <summary>
            Loads a list of the worksheets in an xls file, optionally skipping the data contained in the sheets.
            </summary>
            <param name="fileName">Name of the xls file to load.</param>
            <param name="fillSheets">True to read the sheet data, false to read only the sheet names.</param>
            <remarks>
            Loading the worksheets without their data is much faster than loading the entire workbook.
            This is useful in situations where you want to examine the contents of the xls file (for example, to ensure 
            that you will not overwrite an existing sheet).
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.String)">
            <summary>
            Saves the <see cref="T:C1.C1Excel.C1XLBook"/> to an xls file.
            </summary>
            <param name="fileName">Name of the xls file to save.</param>
            <remarks>If the file can't be created, an exception will be thrown. 
            This typically indicates that the file is currently open by another 
            application (such as Microsoft Excel).</remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)">
            <summary>
            Converts a pixel measurement into twips (1/20th of a point).
            </summary>
            <param name="pix">Measurement in screen pixels.</param>
            <returns>Measurement in twips.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), a 
            resolution-independent unit. .NET controls, on the other hand, usually 
            express measurements in pixels. This method provides an easy way to 
            convert pixel measurements into twips using the current screen resolution.</para>
            <seealso cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)">
            <summary>
            Converts a twip measurement into screen pixels.
            </summary>
            <param name="twip">Measurement in twips.</param>
            <returns>Measurement in screen pixels.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), 
            a resolution-independent unit. .NET controls, on the other hand, 
            usually express measurements in pixels. This method provides an 
            easy way to convert pixel measurements into twips using the 
            current screen resolution.</para>
            <para><see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/></para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.Sheets">
            <summary>
            Gets a collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent
            the worksheets in the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            The <see cref="T:C1.C1Excel.XLSheetCollection"/> returned has methods for counting, 
            enumerating, adding and removing sheets from the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.DefaultFont">
            <summary>
            Gets or sets the default <see cref="T:System.Drawing.Font"/> for the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            <para>You can assign any font to any cell using <see cref="T:C1.C1Excel.XLStyle"/> objects. Cells
            that have no associated custom styles or have styles that do not define
            a custom font are displayed using the book's default font.</para>
            <para>The <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property is initially set to 10 pt Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.KeepFormulas">
            <summary>
            Specifies whether the component should store formulas read from Xls files
            and write them back when saving the file.
            </summary>
            <remarks>
            <para>Setting this property to true allows you to load existing XLS files, modify the values 
            in some cells, and save the file preserving the formulas. This is the default setting.</para>
            <para>Setting this property to false causes the component to remove the formulas in the book 
            when it is loaded. Saving the file in this case will retain the last calculated values but 
            will remove the formulas.</para>
            <para>The component does not provide any support for creating or editing formulas. 
            Formulas must be created in Excel.</para>
            <para>Assigning any value to a cell will clear the formula in the cell.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.BuiltInFormats">
            <summary>
            Summary description for BuiltInFormats.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLCell">
            <summary>
            Represents individual cells in a <see cref="T:C1.C1Excel.XLSheet"/>, and provides
            properties for getting and setting the cell <see cref="P:C1.C1Excel.XLCell.Value"/>,
            <see cref="P:C1.C1Excel.XLCell.Style"/>, and <see cref="P:C1.C1Excel.XLCell.Hyperlink"/>.
            </summary>
            <remarks>
            <para>To create cells, use the <see cref="T:C1.C1Excel.XLSheet"/> indexer (Item property). 
            If the cell already exists, the reference will be returned as usual. 
            If not, the sheet will create the cell (as well as rows and columns if 
            necessary) and will return a reference to the new cell.</para>
            <para>Because it creates cells automatically, the indexer is especially 
            useful when creating and populating sheets.</para>
            </remarks>
            <example>
            For example, the code below creates a new <see cref="T:C1.C1Excel.C1XLBook"/>, then 
            populates the first sheet with a 10 by 10 multiplication table:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            for (int r = 0; r &lt; 10; r++)
            {
              for (int c = 0; c &lt; 10; c++)
              {
                XLCell cell = sheet[r, c];
            	cell.Value = (r+1) * (c+1);
              }
            }
            book.Save(@"c:\temp\test.xls");
            </code>
            Note how the code simply accesses the cells using the indexer. There's no 
            need to create any rows, columns, or cells. The indexer takes care of all 
            that automatically.
            </example>
        </member>
        <member name="P:C1.C1Excel.XLCell.Value">
            <summary>
            Gets or sets the value stored in the cell.
            </summary>
            <remarks>
            <para>The value may contain strings, numeric, boolean, <see cref="T:System.DateTime"/>, or 
            null objects. Other types of object can't be saved into Excel files.</para>
            <para>DateTime values are internally converted into doubles, 
            and stored in the sheet as such. The only way to tell the difference 
            between a DateTime value and a double in Excel is by way of the 
            format associated with the cell (<see cref="P:C1.C1Excel.XLStyle.Format"/> property).
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object associated with the cell.
            </summary>
            <remarks>
            <para>The appearance of each cell is defined by one or more XLStyle objects.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell 
            styles and merges the style elements defined in each one in order to 
            determine how the cell should be displayed.</para>
            <para>The precedence of the styles is: (1) cell, (2) row, (3) column, 
            (4) default style. For example, if a cell style defines the font and 
            background color, those will be applied regardless of the settings in the 
            row and column styles. If the row style defines an alignment, that will 
            be applied regardless of the column style, and so on.</para>
            <para>The cell style may be null, in which case the cell is displayed 
            using the other styles available or the default book style if no others 
            are available.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Hyperlink">
            <summary>
            Gets or sets a string that specifies an action to take when the cell
            is clicked.
            </summary>
            <remarks>
            <para>Hyperlinks may contain URLs that when clicked open a browser window and
            navigate to the specified site (for example, "http://www.componentone.com"). They
            may also contain references to files that are launched by the application
            associated with the file type (for example, "readme.doc"). Finally, hyperlinks
            can be used to send e-mails (for example, "mailto:joe@foo.com").</para>
            <para>Each cell may contain a hyperlink and a value. However, if you assign
            a hyperlink to a cell that has no value (<see cref="P:C1.C1Excel.XLCell.Value"/> == null), then
            the hyperlink text is automatically assigned to the cell value as well.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLCell.XLFormula">
            <summary>
            Rudimentary formula support. 
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLCellRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLCellRange"/> objects on 
            an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.C1Excel.XLCellRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Contains(C1.C1Excel.XLCellRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.IndexOf(C1.C1Excel.XLCellRange)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLCellRange"/> object in the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Remove(C1.C1Excel.XLCellRange)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object from the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(C1.C1Excel.XLCellRange)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLCellRange"/> object to the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLCellRange"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the cell range.</param>
            <param name="colIndex">Index of the left column in the cell range.</param>
            <param name="rowCount">Number of rows in the cell range.</param>
            <param name="colCount">Number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Insert(System.Int32,C1.C1Excel.XLCellRange)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="cr">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLCellRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLCellRange"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            an empty range.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            a specified range.
            </summary>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Bottom column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Intersects(C1.C1Excel.XLCellRange)">
            <summary>
            Determines whether the range intersects another range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.IsEmpty">
            <summary>
            Determines whether the range is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowFrom">
            <summary>
            Gets the index of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnFrom">
            <summary>
            Gets index of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowCount">
            <summary>
            Gets the number of rows in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnCount">
            <summary>
            Gets the number of columns in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowTo">
            <summary>
            Gets or sets the index of the last row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnTo">
            <summary>
            Gets or sets the index of the last column in the range.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLFont">
            <summary>
            XLFont
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStorage">
            <summary>
            C1OleStorage
            wrapper for creating and accessing OLE compound files
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStream">
            <summary>
            C1OleStream
            COleStorage files contain C1OleStream
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueRecordList">
            <summary>
            helper class used to store opaque records
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPrintSettings">
            <summary>
            Provides options and settings for printing <see cref="T:C1.C1Excel.XLSheet"/> objects.
            </summary>
            <remarks>
            <para>The settings are applied to each sheet, and are accessible through the
            sheet's <see cref="P:C1.C1Excel.XLSheet.PrintSettings"/> property.</para>
            <para>Note that <see cref="T:C1.C1Excel.C1XLBook"/> does not provide any printing
            services. The settings are used when printing the sheet from Excel.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLPrintSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLPrintSettings"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Header">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            <para>The header string may contain special commands, i.e. placeholders for the page number, 
            current date, or text formatting attributes. Most of these fields are represented by single 
            letters with a leading ampersand ("&amp;").</para>
            <para>The page header is divided into 3 sections: left, center, and right. Each section is 
            introduced by a special command ("&amp;L", "&amp;C", and "&amp;R"). All text and all commands following 
            are part of the selected section.</para>
            <para>The following commands are available:</para>
            <para>&amp;L Start of the left section</para>
            <para>&amp;C Start of the centred section</para>
            <para>&amp;R Start of the right section</para>
            <para>&amp;P Current page number</para>
            <para>&amp;N Page count</para>
            <para>&amp;D Current date</para>
            <para>&amp;T Current time</para>
            <para>&amp;A Sheet name</para>
            <para>&amp;F File name without path</para>
            <para>&amp;Z File path without file name</para>
            <para>&amp;G Picture (file name)</para>
            <para>&amp;B Bold toggle</para>
            <para>&amp;I Italic toggle</para>
            <para>&amp;U Underline toggle</para>
            <para>&amp;E Double underle toggle</para>
            <para>&amp;S Strikeout toggle</para>
            <para>&amp;X Superscript toggle</para>
            <para>&amp;Y Subscript toggle</para>
            <para>&amp;"[fontname]" Set new font</para>
            <para>&amp;"[fontname,fontstyle]" Set new font with specified style. The style is in most cases 
            "Regular", "Bold", "Italic", or "Bold Italic".</para>
            &amp;[fontheight] Set font height in points.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Footer">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            The footer string has the same structure and embedded commands as the header string. 
            See the <see cref="P:C1.C1Excel.XLPrintSettings.Header"/> property for details.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterHorizontal">
            <summary>
            Gets or sets whether the sheet should be centered horizontally on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterVertical">
            <summary>
            Gets or sets whether the sheet should be centered vertically on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginLeft">
            <summary>
            Gets or sets the left margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginRight">
            <summary>
            Gets or sets the right margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginTop">
            <summary>
            Gets or sets the top margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginBottom">
            <summary>
            Gets or sets the bottom margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginHeader">
            <summary>
            Gets or sets the header margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginFooter">
            <summary>
            Gets or sets the footer margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintHeaders">
            <summary>
            Gets or sets whether row and column headers (the areas with row numbers and column letters) will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintGridlines">
            <summary>
            Gets or sets whether the gridlines will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PaperKind">
            <summary>
            Gets or sets the paper size to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.ScalingFactor">
            <summary>
            Gets or sets the scaling factor (in percent) to use when printing the sheet.
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property automatically sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/>
            property to false, causing C1Excel to use the selected scaling factor and to ignore the
            value of the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.AutoScale">
            <summary>
            Gets or sets the scaling mode used for printed output.
            </summary>
            <remarks>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to true, then the printed sheet will be 
            automatically scaled to fit the number of pages specified by the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> 
            and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.</para>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to false, then the printed sheet will be 
            scaled according to the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.StartPage">
            <summary>
            Gets or sets the initial page number to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesAcross">
            <summary>
            Fit the sheet to this number of pages across (0 means use as many as needed).
            </summary>
            <remarks>
            Causes C1Excel to select "fit to page" print mode, ignoring the value of the 
            <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesDown">
            <summary>
            Fit the sheet to this number of pages down (0 means use as many as needed).
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintPagesInRows">
            <summary>
            Gets or sets whether to print the pages in rows (across first) or in columns (down first).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Landscape">
            <summary>
            Gets or sets whether to print the sheet in landscape mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.BlackAndWhite">
            <summary>
            Gets or sets whether to print the sheet in monochrome mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.DraftQuality">
            <summary>
            Gets or sets whether to print the sheet in draft quality mode.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLRowCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLRow"/> objects that represent the 
            individual rows in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            The collection has methods for counting, enumerating, adding, and removing 
            rows from the collection.
            </remarks>
            <example>
            Note that you can create rows automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book = new C1XLBook();
            sheet = book.Sheets[0];
            XLCell cell   = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLRow"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add(C1.C1Excel.XLRow)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLRow"/> object to the collection.
            </summary>
            <param name="row">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="row"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Contains(C1.C1Excel.XLRow)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLRow"/> is a member of the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.IndexOf(C1.C1Excel.XLRow)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLRow"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32,C1.C1Excel.XLRow)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLRow"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="row">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            The maximum number of <see cref="T:C1.C1Excel.XLRow"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 65,536. This is a limitation imposed by Excel.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Remove(C1.C1Excel.XLRow)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLRow"/> object from the collection.
            </summary>
            <param name="row">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLRow"/> object at the specified index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLRow"/> object at the
            specified position if necessary. It never returns null.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Frozen">
            <summary>
            Gets or sets the number of frozen rows in the collection.
            </summary>
            <remarks>
            Frozen rows are displayed on the top of the sheet and do not scroll vertically.
            They are useful for displaying column headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLColumn"/> objects that represent the 
            individual columns in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>The collection has methods for counting, enumerating, adding, and removing 
            columns from the collection.</para>
            <para>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.</para>
            </remarks>
            <example>
            Note that you can create columns automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book  = new C1XLBook();
            XLSheet  sheet = book.Sheets[0];
            XLCell   cell  = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLColumn"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add(C1.C1Excel.XLColumn)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLColumn"/> object to the collection.
            </summary>
            <param name="col">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="col"/> parameter.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Contains(C1.C1Excel.XLColumn)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLColumn"/> is a member of the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.IndexOf(C1.C1Excel.XLColumn)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLColumn"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32,C1.C1Excel.XLColumn)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLColumn"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="col">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            The maximum number of <see cref="T:C1.C1Excel.XLColumn"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 256. This is a limitation imposed by Excel.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Remove(C1.C1Excel.XLColumn)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLColumn"/> object from the collection.
            </summary>
            <param name="col">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLColumn"/> object at the specified
            index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLColumn"/> object at the
            specified position if necessary. It never returns null.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Frozen">
            <summary>
            Gets or sets the number of frozen columns in the collection.
            </summary>
            <remarks>
            Frozen columns are displayed on the right side of the sheet and do not scroll horizontally. 
            They are useful for displaying row headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLRow">
            <summary>
            Represents a row in a worksheet, provides properties for setting 
            the row's height, style, and visibility.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRow.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLRow"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Visible">
            <summary>
            Gets or sets whether the row is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Height">
            <summary>
            Gets or sets the height of the row, in twips.
            </summary>
            <remarks>
            <para>A value of -1 indicates that the row should be displayed using
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRow.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the row.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLColumn">
            <summary>
            Represents a column in a worksheet, provides properties for setting 
            the column's width, style, and visibility.
            </summary>
            <remarks>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumn.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLColumn"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Visible">
            <summary>
            Gets or sets whether the column is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Width">
            <summary>
            Gets or sets the width of the column, in twips.
            </summary>
            <remarks>
            <para>A value of -1 indicates that the column should be displayed using
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheetCollection">
            <summary>
            Collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent the individual 
            worksheets in a <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            Provides methods and properties for counting, enumerating, adding, and removing sheets from 
            the workbook.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> property to get the 
            book's sheet collection. For example, the code below gets a reference 
            to the first sheet on the book, then prints the sheet's name:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Console.WriteLine(sheet.Name);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and appends it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(C1.C1Excel.XLSheet)">
            <summary>
            Appends an existing <see cref="T:C1.C1Excel.XLSheet"/> to the collection.
            </summary>
            <param name="sheet">The object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and inserts it at a specific 
            position in the collection.
            </summary>
            <param name="index">Index where the new <see cref="T:C1.C1Excel.XLSheet"/> will be added.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(C1.C1Excel.XLSheet)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
            <param name="sheet">The object to look for in the collection.</param>
            <returns>True if the collection contains the object, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an <see cref="T:C1.C1Excel.XLSheet"/> object
            with a given name.
            </summary>
            <param name="sheetName">The name of the sheet to look for (case-insensitive).</param>
            <returns>True if the collection contains an <see cref="T:C1.C1Excel.XLSheet"/>, with the
            given <paramref name="sheetName"/>, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(C1.C1Excel.XLSheet)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLSheet"/> in the collection.
            </summary>
            <param name="sheet">The object to look for.</param>
            <returns>The index of the object in the collection, or -1 if the object is not
            a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(C1.C1Excel.XLSheet)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLSheet"/> from the collection.
            </summary>
            <param name="sheet">The <see cref="T:C1.C1Excel.XLSheet"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> at a specific index from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> with a given name and appends it to the collection.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.C1Excel.XLSheet"/>.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> with the specified name from the collection.
            </summary>
            <param name="name">Name of the sheet to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32,C1.C1Excel.XLSheet)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLSheet"/> object into the collection at the specified position.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(System.String)">
            <summary>
            Gets the position of the sheet with the specified name in the collection.
            </summary>
            <param name="name">Name of the object to look for (case-insensitive).</param>
            <returns>The index of the sheet in the collection, or -1 if the sheet can't be 
            found in the collection.</returns>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLSheet"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the sheet that is selected when the <see cref="T:C1.C1Excel.C1XLBook"/> 
            file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> at a given position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> with the given name (case-insensitive).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheet">
            <summary>
            Represents individual worksheets in an Excel workbook (<see cref="T:C1.C1Excel.C1XLBook"/>).
            </summary>
            <remarks>
            Provides indexers to get or set the value of individual cells (<see cref="T:C1.C1Excel.XLCell"/>) 
            and to access the <see cref="P:C1.C1Excel.XLSheet.Rows"/> and <see cref="P:C1.C1Excel.XLSheet.Columns"/> on the sheet.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer to get an individual 
            sheet. For example, the code below gets a reference to the first sheet on the book, then 
            prints the number of rows and columns on the sheet:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Console.WriteLine("Sheet has {0} rows and {1} columns",
              sheet.Rows.Count, sheet.Columns.Count);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a reference to a cell at the specified coordinates, or null of the cell doesn't exist.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the column.</param>
            <returns>A reference to the <see cref="T:C1.C1Excel.XLCell"/> object at the specified coordinates, or null if there
            is no cell at the specified position.</returns>
            <remarks>
            <para>To populate new sheets, use the <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer instead.</para>
            <para>The indexer will automatically create new rows, columns, and cells as needed, and will never return null.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLSheet.Clone">
            <summary>
            Creates a copy of this sheet.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLSheet"/> object with the same contents and formatting as this sheet.</returns>
            <remarks>
            <para>After cloning a sheet, you must rename it and then add it to the book (duplicate names are not
            allowed).</para>
            <para>This method is useful for applications that generate books with a large number of similar sheets.</para>
            </remarks>
            <example>
            The code below loads a book that contains a template sheet, creates 12 copies of that sheet, removes the
            template sheet, then saves the file with a new name.
            <code>
            // load book with template sheet
            _c1xl.Load(@"c:\temp\template.xls");
            
            // create 12 copies of the template sheet
            XLSheet templateSheet = _c1xl.Sheets["Template"];
            for (int month = 1; month &lt;= 12; month++)
            {
              XLSheet newSheet = templateSheet.Clone();
              newSheet.Name = month.ToString(); // rename clone
              newSheet[0,0].Value = month;      // make changes
              _c1xl.Sheets.Add(newSheet);       // add clone to book
            }
            
            // remove the template sheet and save with new name
            _c1xl.Sheets.Remove("Template");
            _c1xl.Save(@"C:\temp\expense_report.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>When you open a workbook in Excel, the sheet names appear in the tabs 
            below the work area.</para>
            <para>Sheet names can be used as indexers, so they should be unique.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Rows">
            <summary>
            Gets a reference to sheet's row collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Columns">
            <summary>
            Gets a reference to sheet's column collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.MergedCells">
            <summary>
            Gets a <see cref="T:C1.C1Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are merged on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each merged range is represented by a <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the height of individual rows using the <see cref="T:C1.C1Excel.XLRow"/> class. 
            Any rows that do not have a custom height assigned to them will be displayed using 
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/> method 
            in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> 
            method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the width of individual rows using the <see cref="T:C1.C1Excel.XLColumn"/>
            class. Any columns that do not have a custom width assigned to them will 
            be displayed using the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/> property is expressed in twips 
            (1/20th of a point), rather than pixels. This allows sheets to maintain 
            their aspect regardless of the resolution of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            method in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the
            <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at a specified position on the sheet, 
            creating a new cell if necessary.
            </summary>
            <remarks>
            <para>If the specified cell doesn't exist when the indexer is invoked, the sheet will be expanded and 
            a new cell will be created, then returned. This makes it easy to create and populate sheets.</para>
            <para>If you want to determine whether a specific cell has been defined, use the <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method instead.</para>
            <para>The indexer is generally more useful when creating and populating sheets. The <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method is more useful when loading existing sheets.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Locked">
            <summary>
            Gets or sets a value that determines if the sheet is locked for editing.
            </summary>
            <remarks>
            <para>Sheets and styles can be locked. By default, sheets are unlocked and styles are locked. 
            This combination allows users to edit the cells in Excel.</para>
            <para>To protect a cell against editing in Excel, both the sheet and the cell style must have the 
            <see cref="P:C1.C1Excel.XLSheet.Locked"/> property set to true.</para>
            <para>To lock most cells on a sheet and allow editing of only a few cells, lock the sheet, then 
            create an unlocked style and assign it to the cells that should be editable.</para>
            </remarks>
            <example>
            The code below creates a data entry sheet. Most cells are locked, except for the ones where the user 
            is supposed to enter data.
            <code>
            // start with a single locked sheet
            _c1xl.Clear();
            XLSheet sheet = _c1xl.Sheets[0];
            sheet.Locked = true;
            
            // create an unlocked style
            XLStyle dataEntry = new XLStyle(_c1xl);
            dataEntry.Locked = false;
            dataEntry.BackColor = Color.Beige;
            
            // create data entry titles
            sheet[0,0].Value = "Name:";
            sheet[1,0].Value = "Address:";
            sheet[2,0].Value = "Phone #:";
            
            create data entry cells (unlocked)
            sheet[0,1].Style = dataEntry;
            sheet[1,1].Style = dataEntry;
            sheet[2,1].Style = dataEntry;
            
            // save the book
            _c1xl.Save(@"c:\temp\Protected.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Visible">
            <summary>
            Gets or sets the sheet's visibility.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowGridLines">
            <summary>
            Gets or sets whether Excel should show the grid lines when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.GridColor">
            <summary>
            Gets or sets the color used to display gridlines.
            </summary>
            <remarks>
            <para>Set this property to Color.Transparent to dispaly the grid lines using the default
            color.</para>
            <para>To hide the grid lines, set the <see cref="P:C1.C1Excel.XLSheet.ShowGridLines"/> property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.PrintSettings">
            <summary>
            Gets or sets an <see cref="T:C1.C1Excel.XLPrintSettings"/> object that controls how the
            sheet is printed.
            </summary>
            <example>
            The code below creates a header for the sheet and sets the orientation to landscape:
            <code>
            XLPrintSettings pp = sheet.PrintSettings();
            pp.Landscape = true;
            pp.Header = "&amp;LLeft Header&amp;CCenter Header&amp;RRight Header";
            </code>
            </example>
        </member>
        <member name="T:C1.C1Excel.SharedStringTable">
            <summary>
            SharedStringTable is an ArrayList that contains a Hashtable helper.
            
            The Hashtable contains pairs (string, index) and is used for two purposes:
            
            1) To prevent the addition of duplicate values to the list. The Add method
               looks up values in the hashtable and only adds new values.
            
            2) To provide a quick IndexOf override. The index is retrieved from the
               Hashtable instead of using the slow default linear search.
               
            This new implementation reduces the time needed to save a 10,000 x 20 sheet
            from 650 seconds down to 16, essentially the same amount of time needed
            to save numbers.
            
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignHorzEnum">
            <summary>
            Specifies how to align cell content horizontally within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.General">
            <summary>
            Align strings to the left, numbers to the right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Left">
            <summary>
            Align to cell left.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Right">
            <summary>
            Align to cell right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Fill">
            <summary>
            Fill cell, repeating content as necessary.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Justify">
            <summary>
            Justify content horizontally to span the whole cell width.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Selection">
            <summary>
            Align to selection center (may span multiple cells).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignVertEnum">
            <summary>
            Specifies how to align cell content vertically within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Top">
            <summary>
            Align to cell top.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Bottom">
            <summary>
            Align to cell bottom.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Justify">
            <summary>
            Justify content vertically to span the whole cell height.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLDiagonalFlags">
            <summary>
            Specifies the type of diagonal line to draw across the cells.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.None">
            <summary>
            No diagonal.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Forward">
            <summary>
            Forward diagonal (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Backward">
            <summary>
            Backward diagonal (\).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLLineStyleEnum">
            <summary>
            Specifies the line style used for the cell borders.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thin">
            <summary>
            Thin.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dotted">
            <summary>
            Dotted.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thick">
            <summary>
            Thick.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Hair">
            <summary>
            Hair (one pixel).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashed">
            <summary>
            Medium dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotted">
            <summary>
            Thin dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotted">
            <summary>
            Medium dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotDotted">
            <summary>
            Thin dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotDotted">
            <summary>
            Medium dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.SlantedMediumDashDotted">
            <summary>
            Slanted dash-dot.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPatternEnum">
            <summary>
            Specifies the pattern used for To fill the cell background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.None">
            <summary>
            No pattern (transparent).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Solid">
            <summary>
            Solid background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray50">
            <summary>
            50% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray75">
            <summary>
            75% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray25">
            <summary>
            25% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.HorizontalStripe">
            <summary>
            Horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.VerticalStripe">
            <summary>
            Vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalStripe">
            <summary>
            Diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinVerticalStripe">
            <summary>
            Thin vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray12">
            <summary>
            12% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray06">
            <summary>
            6% dotted pattern.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLStyle">
            <summary>
            Contains style elements used to define the appearance of the cells.
            </summary>
            <remarks>
            <para>Each <see cref="T:C1.C1Excel.XLStyle"/> object may define one or more of the following 
            elements: font, format, background color, background pattern, foreground color, 
            alignment, text direction, and word wrapping.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell styles 
            and merges the style elements defined in each one in order to determine how 
            the cell should be displayed. The precedence of the styles is: (1) cell, 
            (2) row, (3) column, (4) default style.</para>
            <para>Every <see cref="T:C1.C1Excel.XLStyle"/> belongs to a <see cref="T:C1.C1Excel.C1XLBook"/>, and may 
            be assigned to one or more <see cref="T:C1.C1Excel.XLRow"/>, <see cref="T:C1.C1Excel.XLColumn"/>, and 
            <see cref="T:C1.C1Excel.XLCell"/> objects through their <see cref="P:C1.C1Excel.XLCell.Style"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.#ctor(C1.C1Excel.C1XLBook)">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Excel.XLStyle"/> and adds it to the
            specified <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <param name="book">Parent <see cref="T:C1.C1Excel.C1XLBook"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)">
            <summary>
            Sets the border style for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="style">Line style used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)">
            <summary>
            Sets the border color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="color">Color used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String,System.Type)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <param name="dataType">Data type to be formatted.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)">
            <summary>
            Converts a Excel-style format string into a .NET-style format string.
            </summary>
            <param name="fmt">Excel-style format to convert.</param>
            <returns>A .NET-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:C1.C1Excel.XLStyle"/> objects are equivalent.
            </summary>
            <param name="obj"><see cref="T:C1.C1Excel.XLStyle"/> object to compare to the current instance.</param>
            <returns>True if the styles are equivalent, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.GetHashCode">
            <summary>
            Serves as a hash function suitable for use in hashing algorithms and 
            data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.C1Excel.XLStyle"/>.</returns>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Font">
            <summary>
            Gets or sets the font for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.Font"/> property to null in order to suppress 
            this style element and use the default font instead. The default font is 
            determined by the book's <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.ForeColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default foreground color instead (black).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped onto a palette. This 
            means that is you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackColor">
            <summary>
            Gets or sets the background color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.BackColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default background color instead (white).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped onto a palette. This 
            means that is you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackPattern">
            <summary>
            Gets or sets the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.PatternColor">
            <summary>
            Gets or sets the color of the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Format">
            <summary>
            Gets or sets the format associated with this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Excel uses formats similar, but not identical to .NET. Refer
            to the Excel documentation for details on how to create format strings.</para>
            <para>You can use the <see cref="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)"/> and <see cref="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String,System.Type)"/>
            methods to convert common Excel format strings to and from .NET format strings.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignHorz"/> property to <see cref="F:C1.C1Excel.XLAlignHorzEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignHorzEnum.General"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignVert"/> property to <see cref="F:C1.C1Excel.XLAlignVertEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignVertEnum.Bottom"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.WordWrap">
            <summary>
            Gets or sets whether this <see cref="T:C1.C1Excel.XLStyle"/> causes cell contents to wrap.
            </summary>
            <remarks>
            Cells that do not wrap will spill onto adjacent cells, and will be kept on 
            a single line even if they contain line-break characters.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Rotation">
            <summary>
            Gets or sets the rotation for this <see cref="T:C1.C1Excel.XLStyle"/>, in degrees.
            </summary>
            <remarks>
            <para>This property should be set to values between 0 and 180, or 255, 
            as explained below:</para>
            <para>Zero means no rotation.</para>
            <para>1-90 means 1 to 90 degrees counter-clockwise (90 causes text to be 
            displayed in the vertical direction going up the cell).</para>
            <para>91-180 means 1 to 90 degrees clockwise (180 causes text to be 
            displayed in the vertical direction going down the cell).</para>
            <para>255 causes letters are stacked top to bottom and not rotated.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Locked">
            <summary>
            Gets or sets whether the cell should be locked for editing when the <see cref="T:C1.C1Excel.XLSheet"/>
            is protected.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderLeft">
            <summary>
            Gets or sets the line style used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderRight">
            <summary>
            Gets or sets the line style used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderTop">
            <summary>
            Gets or sets the line style used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderBottom">
            <summary>
            Gets or sets the line style used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorLeft">
            <summary>
            Gets or sets the color used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorRight">
            <summary>
            Gets or sets the color used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorTop">
            <summary>
            Gets or sets the color used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorBottom">
            <summary>
            Gets or sets the color used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Diagonal">
            <summary>
            Gets or sets which diagonal lines to display (none, forward, backward).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalStyle">
            <summary>
            Gets or sets the line style used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalColor">
            <summary>
            Gets or sets the color used to draw the diagonal lines.
            </summary>
        </member>
        <member name="T:C1.Util.MetafileConverterBase">
            <summary>
            Abstract class to enumerate metafiles and interpret commands into simpler calls.
            Used as a base class for converting metafiles into pdf, xls, rtf, etc.
            </summary>
        </member>
        <member name="T:C1.Util.MetafileConverterBase.MetaFont">
            data wrapper for LOGFONT
        </member>
        <member name="M:C1.Util.MetafileConverterBase.MetaFont.op_Implicit(C1.Util.MetafileConverterBase.MetaFont)~System.Drawing.Font">
            <summary>
            Convert implicitly to GDI+ font.
            </summary>
            <param name="mf">The mate font object.</param>
            <returns>GDI+ approximate font for meta font.</returns>
        </member>
        <member name="P:C1.Util.MetafileConverterBase.MetaFont.Font">
            <summary>
            Get GDI+ aproximate font for this meta font. 
            </summary>
        </member>
        <member name="P:C1.Util.MetafileConverterBase.MetaFont.FontAngle">
            <summary>
            Get angle for this meta font.
            </summary>
        </member>
        <member name="T:C1.Util.ReferenceDC">
            <summary>
            Summary description for ReferenceDC.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.FontSubSet">
            <summary>
            Summary description for FontSubSet.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.FontSubSet.GetGlyphWidth(System.Char)">
            gets a glyph width in normalized 1000 units
        </member>
        <member name="M:C1.C1Pdf.FontSubSet.GetKerning(System.Char,System.Char)">
            gets a kerning in normalized 1000 units
        </member>
        <member name="M:C1.C1Pdf.FontSubSet.GetMetrics(System.Int32)">
            gets the glyph index and metrics for a character
            returns an integer array with {glyph index, width}
        </member>
        <member name="P:C1.C1Pdf.FontSubSet.OutputBuffer">
            get output font buffer for used glyphs only.
        </member>
        <member name="P:C1.C1Pdf.FontSubSet.IsBold">
            get or set used gliphs for this font.
        </member>
        <member name="T:C1.C1Pdf.FontSubSet.BigEndianBinaryReader">
            <summary>
            TTF files are stored in big-endian format, we need special 
            readers and writers
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAnnotationCollection">
            <summary>
            PdfAnnotationCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAnnotation">
            <summary>
            PdfAnnotation
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfArabic">
            <summary>
            Class for support arabic character shaping.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Paperclip">
            <summary>
            Paperclip attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.PushPin">
            <summary>
            Pushpin attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Tag">
            <summary>
            Tag attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Graph">
            <summary>
            Graph attachment icon.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAttachment">
            <summary>
            Summary description for PdfAttachment.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfBookmarkCollection">
            <summary>
            PdfBookmarkCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfBookmark">
            <summary>
            PdfBookmark
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Clip">
            <summary>
            Image is clipped to the rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Stretch">
            <summary>
            Image is stretched to fill the rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Scale">
            <summary>
            Image is scaled to fill as much of the rectangle as possible,
            while keeping the original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Low">
            <summary>
            Low quality, small file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Medium">
            <summary>
            Medium quality, medium file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Default">
            <summary>
            High quality, medium/large file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.High">
            <summary>
            Highest quality, largest file size.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocumentBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Clear">
            <summary>
            Restores the document to its initial state.
            </summary>
            <remarks>
            All current content is discarded, a single empty page is created, and 
            the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage"/> property is set to zero.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.NewPage">
            <summary>
            Starts a new page.
            </summary>
            <remarks>
            Adds a blank page to the document and sets the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage"/> property 
            to make it the currently active page.
            <para>The size of the new page is defined by the value of the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize"/> property.</para>
            <para>If you want the new page to have a different size than the rest of the document, 
            create the new page first, then set the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.String)">
            <summary>
            Saves the Pdf document to a file.
            </summary>
            <param name="fileName">Name of the Pdf file to create.</param>
            <remarks>
            Saving the Pdf document to a file requires that the file be available 
            for writing. If the file already exists and is in use by an application 
            (such as the Adobe Acrobat Reader), the method will throw an exception.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.IO.Stream)">
            <summary>
            Saves the Pdf document to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object to use for saving the document.</param>
            <remarks>
            Saving the Pdf document to a <see cref="T:System.IO.Stream"/> object is often used in Web 
            scenarios, when you are creating a Response object or storing the document in the 
            a cache, and don't want to create temporary files.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.BeginPathInternal">
            <summary>
            For internal use only. Starts a new path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.EndPathInternal">
            <summary>
            For internal use only. Ends the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartPathInternal">
            <summary>
            For internal use only. Starts adding elements to the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.RestartPathInternal">
            <summary>
            For internal use only. Begin a new subpath by moving the current point to coordinates (x, y).
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.CloseFigureInternal">
            <summary>
            For internal use only. Fills/strokes the current path at closed figure.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.FillStrokeInternal(System.Boolean,System.Boolean,System.Boolean,System.Drawing.Drawing2D.FillMode)">
            <summary>
            For internal use only. Fills/strokes the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.UpdateResources(System.Object)">
            <summary>
            For internal use only. Updates resources of specified type.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.EndPage">
            <summary>
            For internal use only. Closes page stream, clears page pointer.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartPage">
            <summary>
            For internal use only. Adds a page to the page collection, opens stream writer on the new page.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartOverlay(System.Int32)">
            <summary>
            For internal use only. Reopens a page for additional output.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetFont(System.Drawing.Font)">
            <summary>
            For internal use only. Sets the current font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetFont(System.Drawing.Font,System.String)">
            <summary>
            For internal use only. Sets the current font, check text for special characters.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetAlternativeFont(C1.C1Pdf.PdfFont,System.String)">
            <summary>
            For internal use only. Sets the current font, check text for special characters.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontSize">
            <summary>
            For internal use only. Gets the current font size.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontSize(System.Drawing.Font)">
            <summary>
            For internal use only. Gets the size of a given font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetPen(System.Drawing.Pen)">
            <summary>
            For internal use only. Sets the current pen.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetBrush(System.Drawing.Brush)">
            <summary>
            For internal use only. Sets the current brush.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetAlternativeFont(C1.C1Pdf.PdfFont,System.String)">
            <summary>
            Find best alternative font for font and text. 
            </summary>
            <param name="pdfFont"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontBlocks(System.String,System.Int32[])">
            <summary>
            Get array (part of text, font, kerns of part of text).
            </summary>
            <param name="text"></param>
            <param name="kerns"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.TextOut(System.String,System.Drawing.PointF,System.Drawing.StringAlignment,System.Boolean)">
            <summary>
            For internal use only. Output text to current Pdf stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.TextOut(System.String,System.Drawing.PointF,System.Drawing.StringAlignment,System.Boolean,System.Int32[],System.Single)">
            <summary>
            For internal use only. Output text with kerning information to current Pdf stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MoveTo(System.Single,System.Single)">
            <summary>
            For internal use only. Moves cursor to a specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.LineTo(System.Single,System.Single)">
            <summary>
            For internal use only. Draws a line from the cursor to the specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            For internal use only. Draws a curve from the cursor to the specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Rectangle(System.Drawing.RectangleF)">
            <summary>
            For internal use only. Draws a rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.PieArc(System.Drawing.RectangleF,System.Single,System.Single,System.Boolean)">
            <summary>
            For internal use only. Draws a pie slice or an arc.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.PieArc(System.Drawing.RectangleF,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            For internal use only. Draws a pie slice or an arc.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.RoundRect(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            For internal use only. Draws a rounded rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Ellipse(System.Drawing.RectangleF)">
            <summary>
            For internal use only. Draws an ellipse.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Polygon(System.Drawing.PointF[])">
            <summary>
            For internal use only. Draws a polygon.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetStreamPosition">
            <summary>
            For internal use only. Gets the Position on the page stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetCurrentID">
            <summary>
            For internal use only. Gets the ID of the last object.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetNewID">
            <summary>
            For internal use only. Increments the ID for the next object.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Write(System.String,System.Object[])">
            <summary>
            Writes raw content into the Pdf stream for the current page.
            </summary>
            <param name="format">Format string, as in <see cref="M:System.Console.WriteLine"/>.</param>
            <param name="args">Array of objects to write using <paramref name="format"/>.</param>
            <remarks>
            This is a low-level method that allows you to insert Pdf commands directly 
            into the page stream. It is intended for use by derived classes and requires 
            knowledge of the Pdf document structure and syntax.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Normalize(System.Drawing.RectangleF)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MeasureText(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MeasureText(System.String,System.Drawing.Font)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <remarks>The new document contains a single empty page, and the
            default page size is set to Letter (8.5 x 11 inches).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="paperKind">The default paper size for the document.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            parameter.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="paperKind">The default paper size for the document.</param>
            <param name="landscape">The default paper orientation for the document.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            and <paramref>landscape</paramref> parameters.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="pageSizeInPoints">The default paper size for the document, in points.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>pageSizeInPoints</paramref>
            parameter.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="x">x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to draw.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="x">x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="y">x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="width">Width of the rectangle to fill.</param>
            <param name="height">Height of the rectangle to fill.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draws a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF"/> and <see cref="T:System.Drawing.SizeF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to draw.</param>
            <param name="corners">A <see cref="T:System.Drawing.SizeF"/> structure that contains the radius of the rectangle corners.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fills the interior of a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF"/> and <see cref="T:System.Drawing.SizeF"/> structures.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.</param>
            <param name="corners">A <see cref="T:System.Drawing.SizeF"/> structure that contains the radius of the rectangle corners.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.</param>
            <param name="x1">x-coordinate of the first point.</param>
            <param name="y1">y-coordinate of the first point.</param>
            <param name="x2">x-coordinate of the second point.</param>
            <param name="y2">y-coordinate of the second point.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line connecting two <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.</param>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line segments.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points to connect.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures using the specified fill mode.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode"/> parameter that determines how to handle overlapping areas within the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a Bézier spline defined by four <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the Bézier spline.</param>
            <param name="start"><see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the curve.</param>
            <param name="ctl1"><see cref="T:System.Drawing.PointF"/> structure that represents the first control point for the curve.</param>
            <param name="ctl2"><see cref="T:System.Drawing.PointF"/> structure that represents the second control point for the curve.</param>
            <param name="end"><see cref="T:System.Drawing.PointF"/> structure that represents the ending point of the curve.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a series of Bézier splines from an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the Bézier splines.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points that determine the curve.</param>
            <remarks>
            <para>The first spline requires four points, and each additional spline requires
            three additional points (it starts from the last point in the previous spline). 
            Therefore, the <paramref name="points"/> array must contain at least four points,
            and the total length minus one must be a multiple of three.</para>
            <para>All coordinates are expressed in points, measured from the upper-left corner of the page.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.</param>
            <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the ellipse.</param>
            <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the ellipse.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the pie shape.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the arc.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillArc(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the arc.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> 
            object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <param name="sf">A <see cref="T:System.Drawing.StringFormat"/> object that determines whether word wrapping is allowed.</param>
            <returns>The size of the string expressed in points.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object
            into a rectangle with the specified width. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>This overload wraps the string to prevent any lines from getting
            wider than the <paramref name="width"/> parameter. The value returned contains
            the given width and the height needed to render the entire string.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>This overload returns the width and height of the string without wrapping.
            Unless the <paramref name="text"/> parameter contains line break characters, the 
            height returned corresponds to the font height.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
            <remarks>
            <para>The <paramref name="sf"/> contains properties that specify formatting options. Use the
            <see cref="P:System.Drawing.StringFormat.Alignment"/> property to specify horizontal alignment and the
            <see cref="P:System.Drawing.StringFormat.LineAlignment"/> property to specify vertical alignment.</para>
            <para>Use the <see cref="P:System.Drawing.StringFormat.FormatFlags"/> property to specify clipping and wrapping.</para>
            <para>To render text in the vertical direction, use the <see cref="F:System.Drawing.StringFormatFlags.DirectionVertical"/>.
            By itself, this flag will cause text to render from the bottom to the top of the rectangle.
            Combined with the <see cref="F:System.Drawing.StringFormatFlags.DirectionRightToLeft"/> flags, it will cause text to render from
            the top to the bottom of the rectangle.</para>
            <para>The <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page.</para>
            </remarks>
            <example>
            The code below renders a long string into several pages, using the return value
            from the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method to determine where to continue printing.
            <code>
            // render string spanning multiple pages
            for (;;)
            {
            	// render as much as will fit into the rectangle
            	int nextChar = _c1pdf.DrawString(text, font,
            		Brushes.Black, rcPage);
            		
            	// break when done
            	if (nextChar &gt;= text.Length)
            		break;
            		
            	// get rid of the part that was rendered
            	text = text.Substring(nextChar);
            	
            	// move on to the next page
            	_c1pdf.NewPage();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, 
            in points from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
            <remarks>
            This overload renders strings aligned to the top left corner of the specified rectangle,
            wrapping text as needed within the rectangle, without clipping, and in the horizontal
            direction. To change any of these defaults, use the overload that allows you to specify
            a <see cref="T:System.Drawing.StringFormat"/> parameter.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="pt"><see cref="T:System.Drawing.PointF"/> structure that specifies the location of the drawn text, in points 
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="pt"><see cref="T:System.Drawing.PointF"/> structure that specifies the location of the drawn text, in points 
            from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.ContentAlignment,C1.C1Pdf.ImageSizeModeEnum)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            adjusting the image size as specified by the <paramref name="align"/> and 
            <paramref name="mode"/> parameters.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <param name="align"><see cref="T:System.Drawing.ContentAlignment"/> value that specifies how the image should be aligned within the rectangle.</param>
            <param name="mode"><see cref="T:C1.C1Pdf.ImageSizeModeEnum"/> value that specifies how the image should be sized to fit the rectangle.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            stretching it to fit the destination rectangle.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <remarks>
            The <see cref="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.ContentAlignment,C1.C1Pdf.ImageSizeModeEnum)"/> method can be used to render bitmaps and metafiles. When used with
            metafiles, it enumerates the drawing commands in the metafile and translates them into low-level
            drawing primitives. This results in resolution-independent images.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            clipping the output to the given clipping rectangle.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rcImage"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <param name="rcClip"><see cref="T:System.Drawing.RectangleF"/> structure that specifies a clipping rectangle on the page. No part of the image is drawn outside the clipping rectangle.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measures the specified Rtf string when drawn with the specified <see cref="T:System.Drawing.Font"/> object
            into a rectangle with the specified width. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)"/>, except it recognizes
            Rtf (Rich Text Format) strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>For details, see the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified Rtf string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">Rtf string to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)"/>, except it recognizes
            Rtf (Rich Text Format) strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>There are two types of Rtf string:</para>
            <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox"/> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are not used.</para>
            <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are used
            to build the Rtf header automatically.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Single)">
            <summary>
            Adds a bookmark to the current page.
            </summary>
            <param name="text">Text that appears on the outline tree.</param>
            <param name="level">Outline level (zero is the top level).</param>
            <param name="y">Position on the current page where the outline entry is located (in points).</param>
            <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <see cref="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Single)"/> 
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a bookmark to the specified page.
            </summary>
            <param name="text">Text that appears on the outline tree.</param>
            <param name="level">Outline level (zero is the top level).</param>
            <param name="page">Index of the page that contains the bookmark.</param>
            <param name="y">Position on the specified page where the outline entry is located (in points).</param>
            <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <see cref="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Single)"/> 
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink to the current page.
            </summary>
            <param name="url">Link destination (can be a url, a file name, or a local link destination).</param>
            <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink to the document.
            </summary>
            <param name="url">Link destination (can be a url, a file name, or a local link destination).</param>
            <param name="page">Index of the page that contains the hyperlink</param>
            <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
            <remarks>
            <para>Hyperlinks can be external (urls and file names) or local (other locations within the same document).</para>
            <para>Local links are useful when you want to implement some type of cross-referencing within the document, such 
            as a table of contents or an index. Local links are identical to regular hyperlinks, except for two things:</para>
            <para>1) The <paramref name="url"/> parameter must start with a "#", and </para>
            <para>2) You must specify the target location for the link using the <see cref="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)"/> method.</para>
            <para>Note that the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method does not add any visible content to the page, so you will 
            usually need another command along with <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> to specify some text or an image that the user 
            can see, as the example below demonstrates.</para>
            </remarks>
            <example>
            The code below adds a string that says "Visit ComponentOne" and a link that takes the user to the ComponentOne home page:
            <code>
            RectangleF rc = new RectangleF(50, 50, 100, 15);
            Font font = new Font("Arial", 10, FontStyle.Underline);
            _c1pdf.AddLink("http://www.componentone.com", rc);
            _c1pdf.DrawString("Visit ComponentOne", font, Brushes.Blue, rc);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink target to the current page.
            </summary>
            <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method).</param>
            <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
            <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method for details and an example.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink target to the document.
            </summary>
            <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method).</param>
            <param name="page">Index of the page that will contain the hyperlink target.</param>
            <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
            <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method for details and an example.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a file attachment to the current page.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
            <summary>
            Adds a file attachment to the current page.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
            <param name="icon"><see cref="T:C1.C1Pdf.AttachmentIconEnum"/> value that determines the appearance of the attachment icon.</param>
            <param name="iconColor"><see cref="T:System.Drawing.Color"/> of the attachment icon.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,System.Int32,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
            <summary>
            Adds a file attachment to the document.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
            <param name="page">Index of the page that contains the attachment.</param>
            <param name="icon"><see cref="T:C1.C1Pdf.AttachmentIconEnum"/> value that determines the appearance of the attachment icon.</param>
            <param name="iconColor"><see cref="T:System.Drawing.Color"/> of the attachment icon.</param>
            <remarks>
            When the user moves the mouse over an area of the page that contains an attachment, 
            the mouse pointer and tool tip change to indicate that the user can retrieve the attachment. 
            The user can right-click the attachment area to open or save the attachment.
            </remarks>
        </member>
        <member name="P:C1.C1Pdf.C1PdfDocument.PageSize">
            <summary>
            Gets or sets the default page size for the document (in points).
            </summary>
        </member>
        <member name="P:C1.C1Pdf.C1PdfDocument.CurrentPage">
            <summary>
            Gets or sets the index of the current page within the document.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property determines which page of the document should 
            receive the output from the methods that generate content (e.g. <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>).</para>
            <para>The value is an integer ranging from -1 (no active page) to <see cref="P:C1.C1Pdf.C1PdfDocumentBase.Pages"/>.<see cref="P:System.Collections.ArrayList.Count"/>-1.</para>
            <para>You rarely have to use the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property while creating a document. 
            When a <see cref="T:C1.C1Pdf.C1PdfDocument"/> object is created, a blank page is automatically added 
            and becomes the current page, so you can immediately start adding content to it.
            When the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method is invoked, a new page is added to the document 
            and becomes the current page.</para>
            <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property is useful when you want to reopen pages that 
            have already been generated and add content to them (for example, page headers and footers).</para>
            </remarks>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.None">
            <summary>
            No compression (useful for debugging).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.BestSpeed">
            <summary>
            Low compression, fastest save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.BestCompression">
            <summary>
            Highest compression, slowest save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.Default">
            <summary>
            High compression, fast save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.Standard">
            <summary>
            Use only standard Pdf fonts (Helvetica, Times, Symbol).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.TrueType">
            <summary>
            Use TrueType fonts, no embedding (viewer must have fonts installed).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.Embedded">
            <summary>
            Use embedded TrueType fonts.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.CurrentEncoding">
            <summary>
            CurrentEncoding
            get encoding used for entry names and comments
            NOTE: this is culture-dependent, which seems like a terrible idea
            but that is apparently what works for the Japanese...
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFontCollection">
            <summary>
            PdfFontCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFont">
            <summary>
            PdfFont
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFontEUDC">
            <summary>
            PdfEUDCFont
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageCollection">
            <summary>
            PdfImageCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImage">
            <summary>
            PdfImage
            store an image to allow reuse, write it out to Pdf format
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageDIB">
            <summary>
            Summary description for PdfImageDIB.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageDIB.BitmapInfo">
            <summary>
            BitmapInfo
            reads a BITMAPINFOHEADER structure, provides a few utilities
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfLink">
            <summary>
            PdfLink
            a link to an external document (URI) or to a location within
            this document (PdfTarget).
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfTarget">
            <summary>
            PdfTarget
            target areas for internal links.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfMetafileConverter">
            <summary>
            Summary description for PdfMetafile.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfMetafileConverter.Clipper">
            <summary>
            Clipper
            Relies on owner's _clipRect. Implements IDisposable to allow this pattern:
            using (new Clipper(this))		// ctor starts clipping
            {
            	// draw clipped stuff
            }								// implicit Dispose ends clipping
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfObjectCollection">
            <summary>
            PdfObjectCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfObject">
            <summary>
            PdfObject
            simple class used to manage unique object IDs and the position
            of each object in the output stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(C1.C1Pdf.PdfPage)">
            <summary>
            Adds a page to the document.
            </summary>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to add to the document.</param>
            <returns>The index of the new page in the document.</returns>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,C1.C1Pdf.PdfPage)">
            <summary>
            Inserts a page at a specific position in the document.
            </summary>
            <param name="index">Position where the new page will be inserted in the document.</param>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Remove(C1.C1Pdf.PdfPage)">
            <summary>
            Removes a page from a document.
            </summary>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to remove from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a page at a specific position from the document.
            </summary>
            <param name="index">Index of the page to be removed from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"/> to the end of the document.
            </summary>
            <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage"/> objects to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of an <see cref="T:System.Collections.ICollection"/> at a specified position 
            in the document.
            </summary>
            <param name="index">Position where the new pages will be inserted.</param>
            <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage"/> objects to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of pages from the document.
            </summary>
            <param name="index">Index of the first page to remove.</param>
            <param name="count">Number of pages to remove from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> and adds it to the end of the document.
            </summary>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize"/> 
            property of the parent document.</para>
            <para>The new page becomes current after it is added to the document (see the 
            <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the 
            <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.SizeF)">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> with the specified size and adds it to 
            the end of the document.
            </summary>
            <param name="pageSize">The size of the new page, in points.</param>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> with the specified size and adds it to 
            the end of the document.
            </summary>
            <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind"/>.</param>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32)">
            <summary>
            Creates a new page and inserts it at a specific position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <remarks>
            <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize"/> property 
            of the parent document.</para>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
            <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <param name="pageSize">The size of the new page, expressed in points.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind"/>.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Clear">
            <summary>
            Removes all pages from the document.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Object)">
            <summary>
            Adds a new page to the document.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new page to the document at a specific position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Remove(System.Object)">
            <summary>
            Removes a page from the document.
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfPageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1Pdf.PdfPage"/> at a specific position in the document.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfPage">
            <summary>
            PdfPage
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfPage.Tag">
            <summary>
            Gets or sets an object associated with the page that contains data
            useful to the application.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfRtf">
            <summary>
            Summary description for PdfRtf.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then dvances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buff"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buff"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overriden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common appications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common appications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the ditionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the ditionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            ZStreamException
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ExportFilter">
            <summary>
            Base class for all export filters, used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render 
            reports into different formats.
            </summary>
            <remarks>
            <para><b>ExportFilter</b> is an abstract class used as a base class for all the built-in export filter classes, 
            <see cref="T:C1.Win.C1Report.HtmlFilter"/>, <see cref="T:C1.Win.C1Report.PdfFilter"/>, <see cref="T:C1.Win.C1Report.RtfFilter"/>, <see cref="T:C1.Win.C1Report.XlsFilter"/>, 
            <see cref="T:C1.Win.C1Report.TextFilter"/>, and <see cref="T:C1.Win.C1Report.TiffFilter"/>.</para>
            <para>You can write your own export filters by deriving from <b>ExportFilter</b>.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.ExportFilter"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.Dispose">
            <summary>
            Releases the resources used by the filter.
            </summary>
            <remarks>
            Override this method in derived classes to free any disposable objects used by the filter.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.StartSection(C1.Win.C1Report.Section,System.Double,System.Double)">
            <summary>
            Called when the component starts rendering a section.
            </summary>
            <param name="section">The <see cref="T:C1.Win.C1Report.Section"/> to render.</param>
            <param name="x">Left position of the section, in twips.</param>
            <param name="y">Top position of the section, in twips.</param>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
            <param name="field"><see cref="T:C1.Win.C1Report.Field"/> object to render.</param>
            <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
            <param name="text">Field text to render.</param>
            <param name="img">Field image to render.</param>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.EndSection(C1.Win.C1Report.Section)">
            <summary>
            Called when the component finishes rendering each <see cref="T:C1.Win.C1Report.Section"/>.
            </summary>
            <param name="section"><see cref="T:C1.Win.C1Report.Section"/> that was rendered.</param>
            
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.NewPage">
            <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.ExportFilter.IsPaged"/> property).
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.StartOverlays">
            <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
            <remarks>
            <para>Overlay fields are used only in reports that contain calculated fields which use the <b>Pages</b>
            property.</para>
            <para>This value is not known until the report has been generated, and is therefore rendered on a second pass.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.AddOutlineEntry(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Called when the component renders the beginning of a report group. 
            </summary>
            <param name="heading">Outline header.</param>
            <param name="level">Outline level.</param>
            <param name="x">Left position of the outline, in twips.</param>
            <param name="y">Top position of the outline, in twips.</param>
            <remarks>
            This method allows the filter to build a report outline.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.IsPaged">
            <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
            <remarks>
            <para>When generating paged reports, the component calls the filter's <see cref="M:C1.Win.C1Report.ExportFilter.NewPage"/>
            method on page breaks and updates the value of the <see cref="P:C1.Win.C1Report.C1Report.Page"/> property.</para>
            <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
            </remarks>
            <returns>True if report is paged.</returns>
        </member>
        <member name="M:C1.Win.C1Report.ExportFilter.UsesImages">
            <summary>
            Returns a value that determines whether the filter requires page images to be generated.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.Win.C1Report.C1Report"/> will render the report into the filter 
            and also into its own <see cref="P:C1.Win.C1Report.C1Report.PageImages"/> collection.</para>
            <para>Some filters use these images to generate their output (e.g. PDF, TIFF). Other filters 
            don't need the images (e.g. HTML, RTF) and therefore this method returns false, which saves some 
            resources while rendering long reports.</para>
            </remarks>
            <returns>True if the filter requires page images.</returns>
        </member>
        <member name="T:C1.Win.C1Report.ExportStream">
            <summary>
            ExportStream.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.HtmlFilter">
            <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render reports into HTML streams or files. 
            </summary>
            <remarks>
            Creating an <b>HtmlFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/>
            method is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)"/>
            methods, but offers some extra flexibility because you can set properties on the <b>HtmlFilter</b> object
            before calling <b>RenderToFilter</b>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Contains the name of the file to be created. 
            If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output stream where the report will be rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output stream where the report will be rendered.</param>
            <param name="idPrefix">A unique report identifier used to avoid duplicate style names 
            when adding several reports to the same HTML stream.</param>
            <param name="fileName">Path and template of file name for member files (pictures etc).</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.IsPaged">
            <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
            <remarks>
            <para>When generating paged reports, the component calls the filter's <see cref="M:C1.Win.C1Report.HtmlFilter.NewPage"/>
            method on page breaks and updates the value of the <see cref="P:C1.Win.C1Report.C1Report.Page"/> property.</para>
            <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
            </remarks>
            <returns>True if report is paged.</returns>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.UsesImages">
            <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
            <remarks>
            <para>By default, C1Report will render the report into the filter and also into its own 
            <see cref="P:C1.Win.C1Report.C1Report.PageImages"/> collection. </para>
            <para><see cref="T:C1.Win.C1Report.HtmlFilter"/> doesn't need the images and therefore this method always 
            returns false, which saves some resources while rendering long reports.</para>
            </remarks>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.NewPage">
            <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.HtmlFilter.IsPaged"/> property).
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.StartSection(C1.Win.C1Report.Section,System.Double,System.Double)">
            <summary>
            Called when the component starts rendering a section.
            </summary>
            <param name="section">The section being rendered.</param>
            <param name="x">Left position of the section, in twips.</param>
            <param name="y">Top position of the section, in twips.</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.EndSection(C1.Win.C1Report.Section)">
            <summary>
            Called when the component finishes rendering each section.
            </summary>
            <param name="section">Section that was rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
            <param name="field">The field to be rendered.</param>
            <param name="rc">Rectangle that determines the field position on the current page, in twips.</param>
            <param name="text">Field text to render.</param>
            <param name="img">Field image to render.</param>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.StartOverlays">
            <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
            <remarks>
            <para>Overlay fields are used only in reports that contain calculated fields which use 
            the <b>Pages</b> variable.</para>
            <para>This value is not known until the report has been generated, and is therefore 
            rendered on a second pass.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.HtmlFilter.Dispose">
            <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
            <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.HtmlFilter.Paged">
            <summary>
            Specifies whether the filter should produce a continuous 
            report into a single HTML file or a paged report into a set of HTML files.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.HtmlFilter.MultiFile">
            <summary>
            Specifies whether the built-in HTML filter should break paged reports 
            into multiple HTML files (one per page).
            </summary>
            <remarks>
            Set this property to false to create a single HTML file containing all pages, 
            with &lt;BR&gt; elements at the page breaks.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.HtmlFilter.DrillDown">
            <summary>
            Specifies whether the user should be able to expand and collapse groups by clicking on their header sections.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.HtmlFilter.StartCollapsed">
            <summary>
            Specifies whether DrillDown reports should be initially displayed in a collapsed state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.HtmlFilter.EncodeHtml">
            <summary>
            Specifies whether field contents should be encoded or rendered in raw format. 
            This property allows you to render fields that contain HTML formatting.
            </summary>
            <remarks>
            <para>By default, field contents are encoded, so a field containing the string "A&lt;B&gt;C" 
            would be rendered as "A&amp;lt;B&amp;gt;C", which would appear as the original string 
            in the browser.</para>
            <para>If you set <see cref="P:C1.Win.C1Report.HtmlFilter.EncodeHtml"/> to False, the same string would be rendered in 
            raw format, causing the browser to display it as "A&lt;B&gt;C" (the "C" would be bold).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.HtmlFilter.ImageTable">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.StyleSheet">
            <summary>
            StyleSheet
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.PdfFilter">
            <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render reports into PDF (portable document format)
            streams or files. 
            </summary>
            <remarks>
            Creating a <b>PdfFilter</b> and using it in a call to <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> is similar to 
            using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)"/> methods, but offers 
            some extra flexibility because you can set properties on the <b>PdfFilter</b> before calling <b>RenderToFilter</b>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.PdfFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.PdfFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:C1.Win.C1Report.PdfFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.PdfFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output <see cref="T:System.IO.Stream"/> where the report will be rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.PdfFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.PdfFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.PdfFilter.EmbedFonts">
            <summary>
            Specifies whether the filter should embed font information into the PDF output.
            </summary>
            <remarks>
            <para>Embedding font information makes the PDF document substantially larger, but it allows the file to be 
            viewed faithfully in systems that don't have all the necessary fonts installed.</para>
            <para>Enbedding fonts is not necessary if the target systems have the necessary <b>TrueType</b>
            fonts installed.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.PdfFilter.Password">
            <summary>
            Gets or sets the owner password associated with the PDF document. 
            </summary>
            <remarks>
            <para>The owner password is required for making changes to the document.</para>
            <para>By default, the password is set to an empty string, which means anyone can open and edit the PDF document.</para>
            <para>The <see cref="T:C1.Win.C1Report.PdfFilter"/> never sets the user password for the file, which means 
            anyone can open and view the PDF document.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.PdfFilter.Outline">
            <summary>
            Specifies whether the PDF output should include an outline tree. 
            </summary>
            <remarks>
            The tree is created automatically based on the report groups and can be used to navigate through the report 
            in the Adobe Acrobat viewer.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.RtfTargetEnum">
            <summary>
            Specifies the format of the export file.
            </summary>
            <remarks>Use the members of this enumeration to set 
            <see cref="P:C1.Win.C1Report.RtfFilter.RtfTarget"/> property of the <see cref="T:C1.Win.C1Report.RtfFilter"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.RtfTargetEnum.Portable">
            <summary>
            This setting creates RTF content that can be viewed in Microsoft Word, 
            WordPad and RichTextBox.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.RtfTargetEnum.MSWord">
            <summary>
            This setting creates RTF content that can be viewed in Microsoft Word. 
            It is useful for exporting high quality images. Documents with such images 
            are significantly larger than with images in Portable format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter">
            <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render reports into RTF (rich text format)
            streams or files. 
            </summary>
            <remarks>
            Creating an <b>RtfFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method 
            is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)"/>
            methods, but offers some extra flexibility because you can set properties on the <b>RtfFilter</b>
            before calling <b>RenderToFilter</b>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output <see cref="T:System.IO.Stream"/> where the report will be rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.IsPaged">
            <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.UsesImages">
            <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
            <param name="field"><see cref="T:C1.Win.C1Report.Field"/> object to render.</param>
            <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
            <param name="text">Field text to render.</param>
            <param name="img">Field image to render.</param>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.NewPage">
            <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.RtfFilter.IsPaged"/> property).
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.StartOverlays">
            <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.Dispose">
            <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
            <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.RtfFilter.GetRTFFont(C1.Win.C1Report.Field)">
            <summary>
            Gets an RTF representation of a a field's <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="field"><see cref="T:C1.Win.C1Report.Field"/> that contains the font.</param>
            <returns>A string contianing the RTF representation of the font.</returns>
        </member>
        <member name="P:C1.Win.C1Report.RtfFilter.EmbedPictures">
            <summary>
            Specifies whether filter should embed images in the RTF document. 
            </summary>
            <remarks>
            Documents with embedded images are significantly larger than text-only documents.
            </remarks> 
        </member>
        <member name="P:C1.Win.C1Report.RtfFilter.RtfTarget">
            <summary>
            Gets or sets the format used to export images. 
            </summary>
            <seealso cref="T:C1.Win.C1Report.RtfTargetEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.RtfFilter.StreamWriter">
            <summary>
            Gets the <see cref="P:C1.Win.C1Report.RtfFilter.StreamWriter"/> object used by filter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.RtfFilter.MarginLeft">
            <summary>
            Gets the left margin of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.RtfFilter.MarginTop">
            <summary>
            Gets the top margin of the page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter.PageBuffer">
            <summary>
            PageBuffer
            Keeps a list of lines to render when the page is complete.
            Text can be added to any line, merging into existing lines if possible.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter.LineBuffer">
            <summary>
            LineBuffer
            Keeps a list of strings to be rendered on a line of RTF
            text, renders when the line is complete.
            This allows rendering multi-column and side-by-side wrapping fields.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter.FieldBuffer">
            <summary>
            FieldBuffer
            stores entries in a LineBuffer
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter.ColorComparer">
            <summary>
            ClrComparer
            Helper class used to sort the color table
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter.LineBufferComparer">
            <summary>
            LineBufferComparer
            Helper class used to sort lines in the page buffer
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfFilter.FieldBufferComparer">
            <summary>
            FieldBufferComparer
            Helper class used to sort fields in a line buffer
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfUtil">
            <summary>
            RtfUtil
            static utilities for handling Rtf text and images
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RtfLabelFilter">
            <summary>
            Class is used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render reports into RTF
            (rich text format) streams or files. 
            </summary>
            <remarks>
            <para>This filter is similar to the plain <see cref="T:C1.Win.C1Report.RtfFilter"/>, except if generates RTF fields with
            absolute positioning. The resulting files are more accurate than the ones created with the plain RTF
            filter, but they are harder to edit and can only be opened in Microsoft Word (WordPad and other simple
            editors do not support RTF absolute positioning).</para>
            <para>Creating an <b>RtfLabelFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method 
            is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)"/>
            methods, but offers some extra flexibility because you can set properties on the <b>RtfLabelFilter</b>
            before calling <b>RenderToFilter</b>.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.RtfLabelFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfLabelFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output <see cref="T:System.IO.Stream"/> where the report will be rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.RtfLabelFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfLabelFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:C1.Win.C1Report.RtfLabelFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
            <param name="field">The field to be rendered.</param>
            <param name="rc">Rectangle that determines the field position on the current page, 
            in twips.</param>
            <param name="text">Field text to render.</param>
            <param name="img">Field image to render.</param>
        </member>
        <member name="T:C1.Win.C1Report.TextFilter">
            <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render reports into plain text streams or files. 
            </summary>
            <remarks>
            Creating a <b>TextFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/>
            method is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)"/>
            methods, but offers some extra flexibility because you can set properties on the <b>TextFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TextFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TextFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output <see cref="T:System.IO.Stream"/> where the report will be rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.IsPaged">
            <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
            <remarks>
            <para>When generating paged reports, the component calls the filter's <see cref="M:C1.Win.C1Report.TextFilter.NewPage"/>
            method on page breaks and updates the value of the <see cref="P:C1.Win.C1Report.C1Report.Page"/> property.</para>
            <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
            </remarks>
            <returns>True if report is paged.</returns>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.UsesImages">
            <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
            <param name="field"><see cref="T:C1.Win.C1Report.Field"/> object to render.</param>
            <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
            <param name="text">Field text to render.</param>
            <param name="img">Field image to render.</param>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.NewPage">
            <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.TextFilter.IsPaged"/> property).
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.StartOverlays">
            <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.TextFilter.Dispose">
            <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
            <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.TextFilter.Paged">
            <summary>
            Specifies whether the filter should produce a continuous report or a report with
            page break characters and page header and footer sections.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.TextFilter.PageBuffer">
            <summary>
            PageBuffer
            Keeps a list of lines to render when the page is complete.
            Text can be added to any line, merging into existing lines if possible.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.TextFilter.LineBuffer">
            <summary>
            LineBuffer
            Keeps a list of strings to be rendered on a line of text.
            This allows rendering multi-column and side-by-side wrapping fields.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.TextFilter.LineBufferComparer">
            <summary>
            LineBufferComparer
            Helper class used to sort lines in the page buffer
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.TiffFilter">
            <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method to render reports into TIFF streams or files. 
            </summary>
            <remarks>
            Creating a <b>TiffFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/>
            method is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)"/>
            methods, but offers some extra flexibility because you can set properties on the <b>TiffFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.TiffFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TiffFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:C1.Win.C1Report.TiffFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TiffFilter"/> class attached to a stream.
            </summary>
            <param name="stream">Output <see cref="T:System.IO.Stream"/> where the report will be rendered.</param>
        </member>
        <member name="M:C1.Win.C1Report.TiffFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.TiffFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.TiffFilter.Resolution">
            <summary>
            Gets or sets the resolution of the TIFF document, in dots per inch. 
            </summary>
            <remarks>
            <para>The default value for this property is 150 dpi.</para>
            <para>Setting the resolution to higher values result in documents with higher quality but significantly larger size.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.XlsFilter">
            <summary>
            Class used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/>method to render reports into Microsoft Excel (XLS) files. 
            </summary>
            <remarks>
            Creating an <b>XlsFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)"/> method is similar 
            to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> method, but offers some extra flexibility because you can set 
            properties on the <b>XlsFilter</b> before calling <b>RenderToFilter</b>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.XlsFilter"/> class attached to a file.
            </summary>
            <param name="fileName">Full name of the file to be created.</param>
            <remarks>
            If the file already exists, the filter will open it and will add a new sheet with the report.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.StartReport(C1.Win.C1Report.C1Report)">
            <summary>
            Called when the component starts rendering a report.
            </summary>
            <param name="report">Owner report.</param>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.IsPaged">
            <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.UsesImages">
            <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
            <param name="field"><see cref="T:C1.Win.C1Report.Field"/> object to render.</param>
            <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
            <param name="text">Field text to render.</param>
            <param name="img">Field image to render.</param>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.EndReport">
            <summary>
            Called when the component finishes rendering a report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.XlsFilter.Dispose">
            <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
            <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.XlsFilter.SheetName">
            <summary>
            Gets or sets the name of the worksheet to be used when saving the report into the Excel workbook file.
            </summary>
            <remarks>
            You can use this property to save multiple reports into a single Excel workbook file, one on each sheet.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.XlsFilter.Shading">
            <summary>
            Gets or sets a value that determines whether cells should be shaded in the Excel workbook file.
            </summary>
            <remarks>
            Set this property to false to create smaller files without any cell shading.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.XlsFilter.FreezePageHeader">
            <summary>
            Gets or sets a value that determines whether header sections should be frozen on the sheet.
            </summary>
            <remarks>
            Set this property to true to freeze rows that contain the ReportHeader and PageHeader sections.
            Frozen rows remain visible when the user scrolls the sheet.
            </remarks>
        </member>
        <member name="M:C1.Win.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.LicensingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            ------------------------------------------------------------------------
            C1Localizer contains static methods to load and look up resources
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.ScriptEngine">
            <summary>
            --------------------------------------------------------------------
            ScriptEngine
            --------------------------------------------------------------------
            ScriptEngine parses strings and returns Expression or Statement
            objects that can be evaluated/executed.
            
            The base class provides only simple expression evaluation. For most 
            practical applications, you will need to add variables and custom
            objects to the engine, so scripts can assign values etc.
            
            To do this, you should derive a new class from ScriptEngine and 
            override the following member:
            
              public virtual object GetObjectByName(string strName)
              
              This function should return an object. The object can be a 
              simple value type (e.g. "pi" returns 3.14), or an object with 
              properties and methods (e.g. myobj.Left). To allow getting and 
              setting the default property, the object must implement a 
              property called "Value" (e.g. myobj = 12 is the same as 
              myobj.Value = 12).
             
            This class has two main members:
            
            - ParseExpression(str) returns an Expression object that can be 
              evaluated very quickly. This returns a value (object type).
            - ParseStatement(str) returns a Statement object that can be
              executed. This does not return anything.
              
            It also has two useful helpers:
              
            - Evaluate(str) parses the expression in str and evaluates it.
            - Execute(str) parses the statement in str and executes it.
            
            These helpers are convenient, but calling them repeatedly is slower
            than using the ParseExpression/ParseStatement and evaluating/executing
            the results (because the latter only parses once).
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.ScriptValueWrapper">
            <summary>
            ScriptValueWrapper is a helper class that wraps simple objects
            and exposes a Value property so the ScriptEngine can assign them new 
            values.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.ScriptException">
            <summary>
            Summary description for ScriptException.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.Expression">
            <summary>
            --------------------------------------------------------------------
            Expression
            --------------------------------------------------------------------
            a tree containing a parsed expression
            e.g.
            Expression expr = scriptEngine.Parse(strExpression);
            object val = expr.Evaluate();
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.Statement">
            <summary>
            --------------------------------------------------------------------
            Statement
            --------------------------------------------------------------------
            a sequence of parsed statements
            e.g.
            Statement stmt = scriptEngine.ParseStatemnt(strStatemtent);
            stmt.Execute();
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.Token">
            <summary>
            --------------------------------------------------------------------
            Token contains:
            --------------------------------------------------------------------
            1) the token id (+, -, *, etc)
            2) the token type (binary operator, unary operator, fun, var, lit)
            3) the token literal (Token, var name, lit value)
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.TKTYPE">
            <summary>
            --------------------------------------------------------------------
            TKTYPE and TKID enumerations:
            --------------------------------------------------------------------
            TKTYPE is the token type and defines operator priority
            TKID is the token ID and is used for evaluating expressions
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.Styles.Border">
            <summary>
            Border is a basic border object, used by StyleContext for rendering
            and measuring elements.
            It provides a solid border with a single color and arbitrary widths 
            on each side.
            Border is designed to be extended so you can implement more complex
            borders (3D, pen-based, compound, etc.)
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.FontHolder">
            <summary>
            Encapsulates a <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object and provides get/set access to the font properties. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Util.FontHolder.#ctor(System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Util.FontHolder"/> class.
            </summary>
            <param name="font">The <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object used to initialize the <b>FontHolder</b>.</param>
        </member>
        <member name="M:C1.Win.C1Report.Util.FontHolder.op_Implicit(C1.Win.C1Report.Util.FontHolder)~System.Drawing.Font">
            <summary>
            Converts a <see cref="T:C1.Win.C1Report.Util.FontHolder"/> object to a <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object.
            </summary>
            <param name="fontHolder">The <see cref="T:C1.Win.C1Report.Util.FontHolder"/> object.</param>
            <returns><see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Util.FontHolder.op_Implicit(System.Drawing.Font)~C1.Win.C1Report.Util.FontHolder">
            <summary>
            Converts a <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object to a <see cref="T:C1.Win.C1Report.Util.FontHolder"/> object.
            </summary>
            <param name="f">The <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object.</param>
            <returns>New <see cref="T:C1.Win.C1Report.Util.FontHolder"/> object whose <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> property is equal to supplied font object.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Util.FontHolder.ToString">
            <summary>
            Gets a string that represents this <see cref="T:C1.Win.C1Report.Util.FontHolder"/>.
            </summary>
            <returns>A string that represents this <see cref="T:C1.Win.C1Report.Util.FontHolder"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Font">
            <summary>
            Gets or sets the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Name">
            <summary>
            Gets or sets the name of the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Size">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> of the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Bold">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> is bold.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Italic">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> is italic.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Underline">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> is underlined.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.FontHolder.Strikethrough">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font"/> has a horizontal line
            through the text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.FontHolderEditor">
            <summary>
            Summary description for FontHolderEditor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.Misc">
            <summary>
            Summary description for Misc.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.PictureHolder">
            <summary>
            Encapsulates an <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image"/> object and provides methods for loading images from 
            image files or from binary database fields.
            </summary>
            <remarks>
            A <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> object may contain an unbound image (from a file or URL),
            or the name of a database field that contains images.</remarks>
        </member>
        <member name="M:C1.Win.C1Report.Util.PictureHolder.op_Implicit(C1.Win.C1Report.Util.PictureHolder)~System.Drawing.Image">
            <summary>
            Converts a <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> object into an <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image"/> object.
            </summary>
            <param name="picHolder">The <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> object.</param>
            <returns>An <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Util.PictureHolder.ToString">
            <summary>
            Gets a string that represents this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/>.
            </summary>
            <returns>A string that represents this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Report.Util.PictureHolder.IsBound">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> is bound to a database field that contains images.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.PictureHolder.IsUrl">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> contains an image URL.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.PictureHolder.IsEmpty">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> is empty.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.PictureHolder.FieldName">
            <summary>
            Gets the name of the database field from which this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/> will load images.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.PictureHolder.Image">
            <summary>
            Gets the <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image"/> loaded by this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Util.PictureHolder.Url">
            <summary>
            Gets the URL that contains the <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image"/> loaded by this <see cref="T:C1.Win.C1Report.Util.PictureHolder"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.RtfHelper">
            <summary>
            RtfHelper: renders RTF into a Graphics context
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.Styles.StyleContext">
            <summary>
            StyleContext contains a base Style definition and a list of
            named Styles. It provides the following services:
            - Style management (create, edit, and remove Styles)
            - Style inheritance mechanism
            - Rendering and measuring methods
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.Styles.Style">
            <summary>
            Style contains a collection of arbitrary attributes, 
            represented by a name/object entry, a reference to a parent
            Style, and a reference to the containing StyleContext.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.TblPersister">
            <summary>
            TblPersister
            Table-driven persistence system for objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.Types">
            <summary>
            Summary description for Types.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.DataSource">
            <summary>
            Provides data for reports.
            </summary>
            <remarks>
            <para>Most reports specify their data sources by setting the <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> and 
            <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> properties. The <b>DataSource</b> object uses these values to connect
            to a database and retrieve the report data.</para>
            <para>Alternatively, you can assign data objects directly to the <see cref="P:C1.Win.C1Report.DataSource.Recordset"/> property.
            This approach is more efficient in scenarios where the data has already been loaded by the 
            application for other purposes, and can be used in the report directly instead of loading a copy.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.GetRecordSource(System.Boolean)">
            <summary>
            Processes the <b>PARAMETERS</b> clause in the <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> string and returns the result.
            </summary>
            <remarks>
            <para>This property is related to the <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property. 
            The <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property sets or returns a string that specifies the source 
            dataset for the report, and it may contain a <b>PARAMETERS</b> clause that causes <see cref="T:C1.Win.C1Report.C1Report"/> 
            to prompt the user for information.</para>
            <para>If you wanted to use the value of the <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property to open a dataset 
            directly from your program, you would have to parse the <b>PARAMETERS</b> clause yourself.</para>
            </remarks>
            <param name="prompt">If set to true, user will be prompted for the parameters 
            before the method returns. If set to false, the default values will be used.</param>
            <returns>The string (SQL statement or table name) that can be used to open a recordset.</returns>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.ToString">
            <summary>
            Returns a string representation of <see cref="T:C1.Win.C1Report.DataSource"/> object.
            </summary>
            <returns>The value of <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property if supplied by the user,
            or "(none)" otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.GetDBFieldList(System.Boolean)">
            <summary>
            This member supports the <see cref="T:C1.Win.C1Report.C1Report"/> infrastructure 
            and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.GetCurrentSchema">
            <summary>
            This member supports the <see cref="T:C1.Win.C1Report.C1Report"/> infrastructure 
            and is not intended to be used directly from your code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.GetFieldValue(System.Int32)">
            <summary>
            Gets the value of the given field, at the cursor position.
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns>Value of the field.</returns>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.BOF">
            <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.EOF">
            <summary>
            Returns true if the cursor is pointing at the last record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.MoveFirst">
            <summary>
            Moves the cursor to the first record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.MoveLast">
            <summary>
            Moves the cursor to the last record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.MovePrevious">
            <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.MoveNext">
            <summary>
            Moves the cursor to the next record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.GetBookmark">
            <summary>
            Returns the current cursor position.
            </summary>
            <returns>Index of current record.</returns>
        </member>
        <member name="M:C1.Win.C1Report.DataSource.SetBookmark(System.Int32)">
            <summary>
            Sets the current cursor position to supplied value.
            </summary>
            <param name="bkmk">Index of record.</param>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.ConnectionString">
            <summary>
            Gets or sets the string used to open a database.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> is used by the <see cref="T:C1.Win.C1Report.DataSource"/> class to load the report data.</para>
            <para>The <see cref="T:C1.Win.C1Report.DataSource"/> class uses an <see cref="T:System.Data.OleDb.OleDbConnection"/> object to retrieve the data, 
            so the syntax for the <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> is the one used OleDb connection strings. For details on 
            the syntax, see the documentation for the <see cref="T:System.Data.OleDb.OleDbConnection"/> class.</para>
            <para>The <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> specifies the database that contains the report data. 
            The <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property specifies which table, stored procedure, or Sql command to use for 
            retrieveing the data.</para>
            <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection"/>,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable"/> object, you can assign the data 
            directly to the <see cref="P:C1.Win.C1Report.DataSource.Recordset"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.RecordSource">
            <summary>
            Gets or sets a string that specifies which table, stored procedure, or Sql command
            to use for retrieving the report data.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> specifies the database that contains the report data. 
            The <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property specifies which table, stored procedure, or Sql command to use for 
            retrieveing the data.</para>
            <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection"/>,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable"/> object, you can assign the 
            data directly to the <see cref="P:C1.Win.C1Report.DataSource.Recordset"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.Filter">
            <summary>
            Gets or sets the expression used to filter which data rows are included in the report.
            </summary>
            <remarks>
            <para>Use the <b>Filter</b> property to restrict the records that you want to include in a 
            report without modifying the <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property.</para>
            <para>Using a filter is similar to specifying a WHERE clause in the SQL statement assigned to
            the <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> property. Both techniques will filter the data according to the
            condidtion specified. The difference is that the <b>Filter</b> property is applied to a table
            that has already been loaded in memory, while the WHERE statement causes only the filtered
            records to be loaded from the database into memory.</para>
            <para>When creating reports that include only small subsets large tables, the WHERE statement
            is a better option, because it doesn't require the entire table to be loaded into memory.
            On the other hand, if the table has already been loaded in memory, the <b>Filter</b> property
            is a better option, since it does not require any additional data to be loaded.</para>
            <para>The syntax for the filter expression is the same used to specify the <see cref="P:System.Data.DataView.RowFilter"/>
            property for <see cref="T:System.Data.DataView"/> objects. The expressions consist of conditions in the form
            <i>ColumnName</i> <i>Operator</i> <i>Value</i>, where <i>ColumnName</i> is the name of a column in 
            the data source (optionally enclosed in square brackets), <i>Operator</i> is one of the regular 
            Visual Basic comparison operators, and <i>Value</i> is a literal enclosed in single quotes. Conditions
            may be concatenated using <b>AND</b> and <b>OR</b> operators.</para>
            </remarks>
            <example>
            The code below shows how to apply a filter to a data source using the <c>Filter</c> property and
            using a WHERE clause in a SQL statement:
            <code>
            if (useFilterProperty)
            {
            	// load all records, filter in memory
                _c1r.DataSource.RecordSource = "SELECT * from Employees";
                _c1r.DataSource.Filter = "HireDate &gt;= '1/1/1993' AND Country = 'UK'";
            }
            else
            {
            	// load selected records only
                _c1r.DataSource.RecordSource = "SELECT * from Employees " +
                    "WHERE HireDate &gt;= #1/1/1993# AND Country = 'UK'";
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.MaxRecords">
            <summary>
            Gets or sets the maximum number of data rows to be included in the report (set to zero to include all rows).
            </summary>
            <remarks>
            <para>This property is useful if you want to limit the size of a report. For example, you may write a report 
            designer with a preview window that shows only the first 500 records from the database.</para>
            <para>Setting this property to zero causes the control to retrieve all records.</para>
            <para>You can also limit the size of reports by setting the <see cref="P:C1.Win.C1Report.C1Report.MaxPages"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.Recordset">
            <summary>
            Sets or gets the data source object that provides data to the report.
            </summary>
            <remarks>
            <para>Usually, the control creates a <see cref="T:System.Data.DataTable"/> object based on the value of the 
            <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> and <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> properties, and uses that object 
            as the report data source.</para>
            
            <para>Alternatively, you may want to create the data source object yourself, and assign it to 
            the control. You can do that by assigning your data source object to the <b>Recordset</b>
            property.</para>
            
            <para>When a <b>DataTable</b> or <b>DataView</b> object is assigned to the <b>Recordset</b>
            property, C1Report automatically creates an internal wrapper class that implements 
            the <see cref="T:C1.Win.C1Report.IC1ReportRecordset"/> interface. Because of this, you can't get the original
            <b>DataTable</b> or <b>DataView</b> objects back by reading the property value. Instead,
            you must cast the wrapper object to an <see cref="T:System.ComponentModel.IListSource"/> and use the 
            <see cref="M:System.ComponentModel.IListSource.GetList"/> method instead, as shown in the example below.</para>
            <value>
            You can assign objects of the following types to the <see cref="P:C1.Win.C1Report.DataSource.Recordset"/> property:
            (1) <see cref="T:System.Data.DataTable"/> objects, (2) <see cref="T:System.Data.DataView"/> objects, or (3) any 
            object that implements the <see cref="T:C1.Win.C1Report.IC1ReportRecordset"/> interface.
            </value>
            </remarks>
            <example>
            <code>
            // create a DataTable
            DataTable dt = new DataTable("my table");
            
            // assign it to c1report
            // automatically creates IC1ReportRecordset wrapper
            c1r.DataSource.Recordset = dt;
            
            // 1) this doesn't work (dbBad == null)
            object wrapper = c1Report1.DataSource.Recordset;
            DataTable dtBad = wrapper as DataTable;
            
            // 2) this does (dtGood == dt)
            DataView dv = ((IListSource)wrapper).GetList() as DataView;
            DataTable dtGood = dv.Table;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.CommandTimeOut">
            <summary>
            Gets or sets the number of seconds to wait before the data connection times out 
            (set to -1 to use the default value, usually 30s).
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.ParentReport">
            <summary>
            Gets the report that contains this <see cref="T:C1.Win.C1Report.DataSource"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.DataSource.DataObject">
            <summary>
            This property supports the <see cref="T:C1.Win.C1Report.C1Report"/> infrastructure 
            and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.FieldAlignEnum">
            <summary>
            Specifies the alignment of text within the field's rectangle.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.Align"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.General">
            <summary>
            Align numbers to the right, other values to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.LeftTop">
            <summary>
            Align to the left and to the top of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.CenterTop">
            <summary>
            Align to the center and to the top of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.RightTop">
            <summary>
            Align to the right and to the top of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.LeftBottom">
            <summary>
            Align to the left and to the bottom of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.CenterBottom">
            <summary>
            Align to the center and to the bottom of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.RightBottom">
            <summary>
            Align to the right and to the bottom of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.LeftMiddle">
            <summary>
            Align to the left and to the middle of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.CenterMiddle">
            <summary>
            Align to the center and to the middle of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.RightMiddle">
            <summary>
            Align to the right and to the middle of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.JustTop">
            <summary>
            Justify and align to the top of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.JustBottom">
            <summary>
            Justify and align to the bottom of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FieldAlignEnum.JustMiddle">
            <summary>
            Justify and align to the middle of the field box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.PictureAlignEnum">
            <summary>
            Specifies the alignment of images within the field's rectangle.
            </summary>
            <remarks>
            Use the members of this enumeration to set the value of the 
            <see cref="P:C1.Win.C1Report.Field.PictureAlign"/> and <see cref="P:C1.Win.C1Report.Layout.PictureAlign"/> properties 
            in the <see cref="T:C1.Win.C1Report.Field"/> and <see cref="T:C1.Win.C1Report.Layout"/> classes.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.LeftTop">
            <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.CenterTop">
            <summary>
            Align to the center and to the top, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.RightTop">
            <summary>
            Align to the right and to the top, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.LeftBottom">
            <summary>
            Align to the left and to the bottom, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.CenterBottom">
            <summary>
            Align to the center and to the bottom, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.RightBottom">
            <summary>
            Align to the right and to the bottom, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.LeftMiddle">
            <summary>
            Align to the left and to the middle, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.CenterMiddle">
            <summary>
            Align to the center and to the middle, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.RightMiddle">
            <summary>
            Align to the right and to the middle, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.Clip">
            <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.Zoom">
            <summary>
            Scale the picture to use as much of the page as possible, 
            while preserving the picture's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.Stretch">
            <summary>
            Stretch the picture to fill the page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureAlignEnum.Tile">
            <summary>
            Tile the picture to fill the page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.PictureScaleEnum">
            <summary>
            Specifies the scaling of images within the field's rectangle.
            </summary>
            <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Field.PictureScale"/> 
            and <see cref="P:C1.Win.C1Report.Layout.PictureScale"/> properties in the <see cref="T:C1.Win.C1Report.Field"/> and <see cref="T:C1.Win.C1Report.Layout"/> classes.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.PictureScaleEnum.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureScaleEnum.Stretch">
            <summary>
            Stretch the picture to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureScaleEnum.Scale">
            <summary>
            Scale the picture to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureScaleEnum.Tile">
            <summary>
            Tile the picture to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureScaleEnum.Hide">
            <summary>
            Hide the picture.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.CheckBoxEnum">
            <summary>
            Specifies how boolean values are translated into checkboxes.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.CheckBox"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class. 
            This property is useful when you wish to display boolean values graphically, 
            rather than using text.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.CheckBoxEnum.NoCheckBox">
            <summary>
            No checkbox (display as text).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.CheckBoxEnum.CheckBox">
            <summary>
            Checkbox.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.CheckBoxEnum.CrossBox">
            <summary>
            Crossbox.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.CheckBoxEnum.RadioButton">
            <summary>
            Radio button.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.BorderStyleEnum">
            <summary>
            Specifies the Field’s border style.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.BorderStyle"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.BorderStyleEnum.Transparent">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BorderStyleEnum.Solid">
            <summary>
            Solid border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BorderStyleEnum.Dash">
            <summary>
            Dashed border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BorderStyleEnum.Dot">
            <summary>
            Dotted border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BorderStyleEnum.DashDot">
            <summary>
            Dash-dot border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BorderStyleEnum.DashDotDot">
            <summary>
            Dash-dot-dot border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.LineSlantEnum">
            <summary>
            Determines whether/how a line should be drawn across the field 
            (as opposed to a box around the field).
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.LineSlant"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.LineSlantEnum.NoLine">
            <summary>
            Regular field (not a line).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.LineSlantEnum.NoSlant">
            <summary>
            Render field as a vertical line (if Height > Width) 
            or as a horizontal line (if Width > Height).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.LineSlantEnum.Down">
            <summary>
            Render field as a line between the left-top 
            and right-bottom corners of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.LineSlantEnum.Up">
            <summary>
            Render field as a line between the left-bottom 
            and right-top corners of the field box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RunningSumEnum">
            <summary>
            Determines whether to calculate a running sum.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.RunningSum"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.RunningSumEnum.NoRunningSum">
            <summary>
            Do not treat field as a running sum.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.RunningSumEnum.SumOverGroup">
            <summary>
            Calculate running sum over each group.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.RunningSumEnum.SumOverAll">
            <summary>
            Calculate running sum over the whole report.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.AnchorEnum">
            <summary>
            Determines how the field is positioned with respect to its containing section 
            when the section grows or shrinks as a result of the section's 
            <see cref="P:C1.Win.C1Report.Section.CanGrow"/> and <see cref="P:C1.Win.C1Report.Section.CanShrink"/> properties.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.Anchor"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.AnchorEnum.Top">
            <summary>
            The field does not move. The space between the top of the field 
            and the top of the section remains the same.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.AnchorEnum.Bottom">
            <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the section remains the same.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.AnchorEnum.TopAndBottom">
            <summary>
            The field grows or shrinks. The space between field and the section 
            remains the same (above and below).
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.TextDirectionEnum">
            <summary>
            Specifies the direction of the text in the field.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.TextDirection"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.TextDirectionEnum.Normal">
            <summary>
            Text direction is normal.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.TextDirectionEnum.Up">
            <summary>
            Text direction is up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.TextDirectionEnum.Down">
            <summary>
            Text direction is down.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.BarCodeEnum">
            <summary>
            Determines what type of barcode will be used in the field.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.BarCode"/> property in the <see cref="T:C1.Win.C1Report.Field"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.None">
            <summary>
            No barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.Code39">
            <summary>
            Alpha-numeric, (Code 3 of 9).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.Code93">
            <summary>
            Alpha-numeric.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.Code128">
            <summary>
            Alpha-numeric, denser than Code39 and required at least 6 characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.CodeI2of5">
            <summary>
            Numeric only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.Codabar">
            <summary>
            Numeric only, slightly denser than Code39.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.PostNet">
            <summary>
            Numeric only, US Postal Service.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.Ean13">
            <summary>
            EAN-13 barcode. EAN-13 encodes 12-digit article codes 
            (plus one check digit created by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BarCodeEnum.Ean8">
            <summary>
            EAN-8 barcode. EAN-8 encodes 7-digit article codes 
            (plus one check digit created by the control).
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.BackStyleEnum">
            <summary>
            Determines whether the field will be rendered with an opaque or transparent background.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BackStyleEnum.Transparent">
            <summary>
            Transparent background.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.BackStyleEnum.Opaque">
            <summary>
            Opaque background.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Field">
            <summary>
            Displays individual data items in a report. 
            </summary>
            <remarks>
            Every element visible in a report is represented by a <b>Field</b> object. 
            Fields can display text, images, expressions, lines, rectangles, or subreports.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Field.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Field"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Field.OnPropertyChanged">
            <summary>
            Marks the owner report as dirty so it will clear the internal cache and render again.
            </summary>
            <remarks>
            <para>This is useful in the implementation of custom fields (classes based on <see cref="T:C1.Win.C1Report.Field"/>).</para>
            <para>After changing the value of any properties that affect the field's appearance, call this method 
            to ensure that the report will be re-generated and the changes will be visible.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Field.SetZOrder(System.Boolean)">
            <summary>
            Brings a field to the front or sends it to the back of the <b>ZOrder</b>.
            </summary>
            <param name="front">Determines whether the field is brought to the front or sent to the back
            of the <b>ZOrder</b>.</param>
        </member>
        <member name="M:C1.Win.C1Report.Field.ToString">
            <summary>
            Returns a description of the field (name, location, size).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Report.Field.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:C1.Win.C1Report.Field"/> object.
            </summary>
            <returns>Copy of the current <see cref="T:C1.Win.C1Report.Field"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Report.Field.RenderDesigner(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            This member supports the C1Report infrastructure and is not intended 
            to be used directly from your code. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Field.OnFontChanged">
            <summary>
            This member supports the C1Report infrastructure and is not intended 
            to be used directly from your code. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Field.GetRenderContent(System.String@,System.Drawing.Image@,System.Boolean)">
            <summary>
            Selects the text or image that will be rendered by the field.
            </summary>
            <param name="value">Field text.</param>
            <param name="img">Chart image.</param>
            <param name="designTime">This parameter allows the field to render differently at design time or run time. 
            This is usually needed for bound controls, since no data is available at design time.</param>
            <remarks>Override this method in derived classes to provide custom text or images to be rendered in the report.</remarks>
        </member>
        <member name="M:C1.Win.C1Report.Field.Load(System.Xml.XmlNodeList)">
            <summary>
            Override in derived classes to provide advanced persistence mechanism.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:C1.Win.C1Report.Field.Save(System.Xml.XmlWriter)">
            <summary>
            Override in derived classes to provide advanced persistence mechanism.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="P:C1.Win.C1Report.Field.Name">
            <summary>
            Gets or sets the field name.
            </summary>
            <remarks>
            <para>The field name can be used as an index into the control's <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.</para>
            <para>Field names are also used to identify fields in <b>VBScript</b> expressions, as shown in the example
            below.</para>
            <para>Duplicate and empty field names are allowed, but should be avoided if you plan to use the field names 
            in scripts or as indexers.</para>
            </remarks>
            <example>
            The code below assigns a script to the report's <see cref="F:C1.Win.C1Report.SectionTypeEnum.Detail"/> section. The script 
            changes a field's <see cref="P:C1.Win.C1Report.Field.ForeColor"/> property depending on a value.
            <code>
            _c1r.Sections.Fields["sampleField"].ForeColor = Color.Black;
            _c1r.Sections.Detail.OnFormat = 
                "sampleField.ForeColor = iif(someValue &lt; 5, vbRed, vbBlack)";
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.Visible">
            <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Field"/> will be rendered in the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Tag">
            <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Index">
            <summary>
            Returns the position of the field in the parent report's <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Section">
            <summary>
            Gets or sets the section to which the field belongs.
            </summary>
            <remarks>
            To move a field from one section to another, set its <see cref="P:C1.Win.C1Report.Field.Section"/> property to a new value.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Report">
            <summary>
            This property is obsolete. Use the <see cref="P:C1.Win.C1Report.Field.ParentReport"/> property instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.ParentReport">
            <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report"/> that contains this field.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.ParentSection">
            <summary>
            Gets the <see cref="P:C1.Win.C1Report.Field.Section"/> that contains this field.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Text">
            <summary>
            Gets or sets the field's text.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1Report.Field.Text"/> property contains the text that will be rendered on the report.</para>
            <para>This value may be rendered literally (without any translation) or it may be evaluated as a 
            <b>VBScript</b> expression, depending on the setting of the <see cref="P:C1.Win.C1Report.Field.Calculated"/> property.</para>
            </remarks>
            <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.Calculated">
            <summary>
            Specifies whether the <see cref="P:C1.Win.C1Report.Field.Text"/> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
            <remarks>
            <para>If this property is set to false, the value of the <see cref="P:C1.Win.C1Report.Field.Text"/> property is rendered 
            on the report without any further processing.</para>
            <para>If it is set to true, the value of the <see cref="P:C1.Win.C1Report.Field.Text"/> property is evaluated as a 
            <b>VBScript</b> expression and the result of the expression is rendered on the report.</para>
            </remarks>
            <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.Value">
            <summary>
            Gets or sets the field's calculated value.
            </summary>
            <remarks>
            <para>When a field's <see cref="P:C1.Win.C1Report.Field.Calculated"/> property is set to true, the control evaluates 
            the expression stored in the <see cref="P:C1.Win.C1Report.Field.Text"/> property and stores the result in the 
            <see cref="P:C1.Win.C1Report.Field.Value"/> property, which gets rendered into the report.</para>
            <para>This is the field's default property, so when you use a field name in a <b>VBScript</b>
            expression, you are actually referring to the field's <see cref="P:C1.Win.C1Report.Field.Value"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.HideDuplicates">
            <summary>
            Specifies whether duplicate values in consecutive records should be suppressed.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.Win.C1Report.Field.HideDuplicates"/> property to hide a field on a report 
            when its value is the same as in the preceding record.</para>
            <para>For example, on a report listing suppliers and their products, each supplier's name 
            can appear once for each group of products, rather than once for each product.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.RunningSum">
            <summary>
            Specifies whether to show a running sum for the field.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.Win.C1Report.Field.RunningSum"/> property to calculate record-by-record or 
            group-by-group totals in a report.</para>
            <para>The <see cref="P:C1.Win.C1Report.Field.RunningSum"/> property specifies whether a calculated field on a report 
            displays a running total and lets you set the range over which values are accumulated.</para>
            </remarks>
            <seealso cref="T:C1.Win.C1Report.RunningSumEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.Left">
            <summary>
            Gets or sets the x-coordinate of the field's left edge in twips.
            </summary>
            <remarks>
            <para>A field's location is the distance from its upper left corner to the upper left corner
            of its containing <see cref="P:C1.Win.C1Report.Field.Section"/>.</para>
            <para>Setting the <see cref="P:C1.Win.C1Report.Field.Left"/> or <see cref="P:C1.Win.C1Report.Field.Top"/> property to zero places the field at 
            the very left or top of its containing section.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Top">
            <summary>
            Gets or sets the y-coordinate of the field's top edge in twips.
            </summary>
            <remarks>
            <para>A field's location is the distance from its upper left corner to the upper left corner of its containing 
            <see cref="P:C1.Win.C1Report.Field.Section"/>.</para>
            <para>If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow"/> or <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight"/> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop"/> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top"/> and <see cref="P:C1.Win.C1Report.Field.Height"/> properties is not affected.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Width">
            <summary>
            Gets or sets the width of the field in twips.
            </summary>
            <remarks>
            <para>Every <see cref="T:C1.Win.C1Report.Field"/> object has a rectangle, or "field box", where the field contents are rendered.</para>
            <para>The field box is defined by the <see cref="P:C1.Win.C1Report.Field.Left"/>, <see cref="P:C1.Win.C1Report.Field.Top"/>, <see cref="P:C1.Win.C1Report.Field.Width"/>, and <see cref="P:C1.Win.C1Report.Field.Height"/> properties.</para>
            <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Height">
            <summary>
            Gets or sets the height of the field in twips.
            </summary>
            <remarks>
            <para>Every <see cref="T:C1.Win.C1Report.Field"/> object has a rectangle, or "field box", where the field contents are rendered.</para>
            <para>The field box is defined by the <see cref="P:C1.Win.C1Report.Field.Left"/>, <see cref="P:C1.Win.C1Report.Field.Top"/>, <see cref="P:C1.Win.C1Report.Field.Width"/>, and <see cref="P:C1.Win.C1Report.Field.Height"/> properties.</para>
            <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
            <para>The field's <see cref="P:C1.Win.C1Report.Field.Height"/> property should be set to a value larger than or equal to the height of the 
            field's <see cref="P:C1.Win.C1Report.Field.Font"/>, or no text will appear in the field.</para>
            <para>If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow"/> or <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight"/> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop"/> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top"/> and <see cref="P:C1.Win.C1Report.Field.Height"/> properties is not affected.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.ForcePageBreak">
            <summary>
            Specifies whether to insert page breaks before or after the field.
            </summary>
            <seealso cref="T:C1.Win.C1Report.ForcePageBreakEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.CanGrow">
            <summary>
            Specifies whether the field height should be automatically increased to fit the field's contents.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.Win.C1Report.Field.CanGrow"/> and <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties to control 
            the appearance of report fields and sections. When you set both properties to true, the field 
            or section automatically adjusts so any amount of data can be printed. When a field grows or 
            shrinks, the fields below it move down or up the page.</para>
            <para>If you set a field's <see cref="P:C1.Win.C1Report.Field.CanGrow"/> property to true, the control automatically 
            sets the <see cref="P:C1.Win.C1Report.Field.CanGrow"/> property of the containing section to true. (However, if you 
            set a control's <see cref="P:C1.Win.C1Report.Field.CanShrink"/> property to true, the control doesn't set the section's 
            <see cref="P:C1.Win.C1Report.Field.CanShrink"/> property to true.)</para>
            <para>When you use the <see cref="P:C1.Win.C1Report.Field.CanGrow"/> and <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties, remember that:</para>
            <para>1. The property settings don't affect the horizontal spacing between fields; they affect 
            only the vertical space the fields occupy.</para>
            <para>2. The height of a large field can prevent fields beside it from shrinking. For example, 
            if several short controls are on the left side of a report's detail section and one tall control, 
            such as an unbound object frame, is on the right side, the controls on the left won't shrink,
            even if they contain no data.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.CanShrink">
            <summary>
            Specifies whether the field height should be automatically reduced to fit the field's contents.
            </summary>
            <seealso cref="P:C1.Win.C1Report.Field.CanGrow"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.KeepTogether">
            <summary>
            Specifies whether the field should be kept together on a page.
            </summary>
            <remarks>
            <para>If this property is set to true, the control will insert page breaks in order to keep 
            the field contents toghether on a page.</para>
            <para>If it is set to false, and the containing <see cref="P:C1.Win.C1Report.Field.Section"/> also has its 
            <see cref="P:C1.Win.C1Report.Field.Section"/> property set to false, then the field may be rendered across
            two or more pages.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Anchor">
            <summary>
            Gets or sets the field's vertical position relative to its containing <see cref="P:C1.Win.C1Report.Field.Section"/>.
            </summary>
            <remarks>
            <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
            <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
            </remarks>
            <seealso cref="T:C1.Win.C1Report.AnchorEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.ZOrder">
            <summary>
            Gets or sets the <b>ZOrder</b> for the field.
            </summary>
            <remarks>
            <para>The <b>ZOrder</b> of a field determines whether it is rendered in front of or behind 
            other fields that overlap with it.</para>
            <para>High <b>ZOrder</b> values bring the field to the front, low values send it to the back.</para>
            <para>Because <b>ZOrder</b> values are relative, it is usually easier to call the <see cref="M:C1.Win.C1Report.Field.SetZOrder(System.Boolean)"/> 
            method, which ensures the field is rendered in front of or behind all other overlapping fields.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.RenderTop">
            <summary>
            Gets or sets the y-coordinate of the field's top edge in twips after the <see cref="P:C1.Win.C1Report.Field.CanGrow"/> and 
            <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties have been applied to the containing <see cref="P:C1.Win.C1Report.Field.Section"/>.
            </summary>
            <remarks>
            If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow"/> or <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight"/> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop"/> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top"/> and <see cref="P:C1.Win.C1Report.Field.Height"/> properties is not affected.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.RenderHeight">
            <summary>
            Gets the height of the field in twips after the <see cref="P:C1.Win.C1Report.Field.CanGrow"/> and <see cref="P:C1.Win.C1Report.Field.CanShrink"/>
            properties have been applied to the field.
            </summary>
            <remarks>
            If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow"/> or <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight"/> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop"/> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top"/> and <see cref="P:C1.Win.C1Report.Field.Height"/> properties is not affected.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Bounds">
            <summary>
            Gets or sets the field's size and location within the section, in twips.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Size">
            <summary>
            Gets or sets the field's size, in twips.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Location">
            <summary>
            Gets or sets the field's location within the section, in twips.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.Font">
            <summary>
            Gets or sets the field's font.
            </summary>
            <remarks>If you set a field's font <see cref="P:C1.Win.C1Report.Util.FontHolder.Size"/> property to a value that 
            is too large to fit the field box (defined by the <see cref="P:C1.Win.C1Report.Field.Height"/> property), 
            no text will appear in the field.
            </remarks>
            <seealso cref="T:C1.Win.C1Report.Util.FontHolder"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.BackColor">
            <summary>
            Gets or sets the field's background color. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.ForeColor">
            <summary>
            Gets or sets the field's foreground color.
            </summary>
            <remarks>
            Use the <b>ForeColor</b> property to specify the color for text in a field. You can use this property to make 
            fields easy to read or to convey a special meaning.
            </remarks>
            <example>
            The code below uses script to change the color of the text in the <i>UnitsInStock</i> field when its value 
            falls below the reorder level.
            <code>
            // build script
            string script = "UnitsInStock.ForeColor = " +
            	"IIF(UnitsInStock &lt; ReorderLevel, vbRed, vbBlack)";
            	
            // assign script to detail section
            _c1r.Sections.Detail.OnPrint = script;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.Format">
            <summary>
            Gets or sets a string used to format the field value.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.Win.C1Report.Field.Format"/> property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
            <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.Win.C1Report.Field.Format"/> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
            <para>You can use the <see cref="P:C1.Win.C1Report.Field.Format"/> property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
            <para>The syntax for the format string is the same used with the .NET <see cref="M:System.String.Format(System.String,System.Object)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Align">
            <summary>
            Gets or sets how text is aligned within the field.
            </summary>
            <seealso cref="T:C1.Win.C1Report.FieldAlignEnum"/>
            <remarks>
            <para>This property determines how text is aligned within the field.</para>
            <para>To control picture alignment, use the <see cref="P:C1.Win.C1Report.Field.PictureAlign"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.WordWrap">
            <summary>
            Specifies whether the field's contents should be allowed to wrap within the field rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.TextDirection">
            <summary>
            Gets or sets the direction of the text within the field.
            </summary>
            <seealso cref="T:C1.Win.C1Report.TextDirectionEnum"/>
            <remarks>
            Not all output formats support vertical text. The preview, print, PDF, TIFF, and XLS formats do support 
            vertical text. The HTML, RTF, and plain text formats do not.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.LineSpacing">
            <summary>
            Gets or sets the line spacing between text lines in the field, in twips.
            </summary>
            <remarks>
            Setting this property to zero causes the control to use the default line spacing, 
            which corresponds to the height of the field's font.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.MarginLeft">
            <summary>
            Gets or sets the spacing between the left edge of the field and its content, in twips.
            </summary>
            <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.MarginTop">
            <summary>
            Gets or sets the spacing between the top edge of the field and its content, in twips.
            </summary>
            <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.MarginRight">
            <summary>
            Gets or sets the spacing between the right edge of the field and its content, in twips.
            </summary>
            <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.MarginBottom">
            <summary>
            Gets or sets the spacing between the bottom edge of the field and its content, in twips.
            </summary>
            <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.BorderStyle">
            <summary>
            Gets or sets the field's border style.
            </summary>
            <remarks>
            <para>To draw a border around a field, set the following properties:</para>
            <para><see cref="P:C1.Win.C1Report.Field.BorderColor"/> to define the border color.</para>
            <para><see cref="P:C1.Win.C1Report.Field.BorderStyle"/> to define the border style (e.g., solid, dashed, etc.).</para>
            <para><see cref="P:C1.Win.C1Report.Field.LineWidth"/> to define the border width (in twips).</para>
            <para>When you create fields with text and a border, text will be positioned very close to the border. You can control 
            the distance between the text and the border using the <see cref="P:C1.Win.C1Report.Field.MarginLeft"/>, <see cref="P:C1.Win.C1Report.Field.MarginRight"/>,
            <see cref="P:C1.Win.C1Report.Field.MarginTop"/>, and <see cref="P:C1.Win.C1Report.Field.MarginBottom"/> properties.</para>
            <para>To draw lines, see the <see cref="P:C1.Win.C1Report.Field.LineSlant"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.LineWidth">
            <summary>
            Gets or sets the width of the field's border or line.
            </summary>
            <remarks>
            <para>To draw a border around a field, set the following properties:</para>
            <para><see cref="P:C1.Win.C1Report.Field.BorderColor"/> to define the border color.</para>
            <para><see cref="P:C1.Win.C1Report.Field.BorderStyle"/> to define the border style (e.g., solid, dashed, etc.).</para>
            <para><see cref="P:C1.Win.C1Report.Field.LineWidth"/> to define the border width (in twips).</para>
            <para>To draw lines, see the <see cref="P:C1.Win.C1Report.Field.LineSlant"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.BorderColor">
            <summary>
            Gets or sets the field's border color.
            </summary>
            <seealso cref="P:C1.Win.C1Report.Field.BorderStyle"/>
            <remarks>
            <para>To draw a border around a field, set the following properties:</para>
            <para><see cref="P:C1.Win.C1Report.Field.BorderColor"/> to define the border color.</para>
            <para><see cref="P:C1.Win.C1Report.Field.BorderStyle"/> to define the border style (e.g., solid, dashed, etc.).</para>
            <para><see cref="P:C1.Win.C1Report.Field.LineWidth"/> to define the border width (in twips).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.LineSlant">
            <summary>
            Specifies whether a line should be drawn across the field (as opposed to a box around the field).
            </summary>
            <seealso cref="T:C1.Win.C1Report.LineSlantEnum"/>
            <remarks>
            The color, style, and thickness of the line are determined by the <see cref="P:C1.Win.C1Report.Field.BorderColor"/>, <see cref="P:C1.Win.C1Report.Field.BorderStyle"/>, 
            and <see cref="P:C1.Win.C1Report.Field.LineWidth"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.Picture">
            <summary>
            Gets or sets a picture to display on the field.
            </summary>
            <remarks>
            <para>You may set this property to three types of object:</para>
            <para>1) Regular .NET <see cref="T:System.Drawing.Image"/> objects.</para>
            <para>2) Strings containing image file names or urls.</para>
            <para>3) Strings containing names of image fields in the report data source.</para>
            <para>Options 1 and 2 are used to create unbound images, such as logos. These images do not 
            depend on the report data.</para>
            <para>Option 3 is used to create bound images, such as product or employee pictures. These 
            are images stored with the report data.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1Report.Field.PictureAlign"/>
            <seealso cref="P:C1.Win.C1Report.Field.PictureScale"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.PictureAlign">
            <summary>
            Gets or sets how field pictures should be the aligned.
            </summary>
            <seealso cref="P:C1.Win.C1Report.Field.Picture"/>
            <seealso cref="P:C1.Win.C1Report.Field.PictureScale"/>
            <seealso cref="T:C1.Win.C1Report.PictureAlignEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.PictureScale">
            <summary>
            Gets or sets how images should be the scaled to fit within the field area.
            </summary>
            <remarks>
            <para>Depending on the setting of this property, images may be clipped, stretched, scaled (which preserves the 
            image's aspect ratio), tiled, or hidden.</para>
            <para><b>PictureScale</b> works with the <see cref="P:C1.Win.C1Report.Field.PictureAlign"/> property so you can control image scaling and 
            alignment independently.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.CheckBox">
            <summary>
            Specifies whether the field should be displayed as a checkbox.
            </summary>
            <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.RTF">
            <summary>
            Specifies whether the field should render string enclosed in curly brackets as RTF.
            </summary>
            <remarks>If you set this property to true, any fields containing text 
            enclosed in curly brackets will be rendered as RTF. 
            This allows you to add complex formatting within a field.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Field.BarCode">
            <summary>
            Allows fields to be rendered in barcode format.
            </summary>
            <seealso cref="T:C1.Win.C1Report.BarCodeEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Field.LinkTarget">
            <summary>
            Gets or sets an expression that evaluates to a URL to be visited when the field is clicked.
            </summary>
            <remarks>
            <para>If not empty, this should be an expression that evaluates to a URL. After the report is generated, 
            clicking on the field will cause the report viewer to navigate to the URL. The report viewer can be a web browser 
            (for HTML reports), Adobe Acrobat (for PDF reports), or other viewer applications.</para>
            <para>Not all report viewers support hyperlinks. The <b>PrintPreview</b> control that ships with .NET, for example, 
            does not.</para>
            <para>The field will be displayed as usual, based on the contents of its <see cref="P:C1.Win.C1Report.Field.Text"/> and <see cref="P:C1.Win.C1Report.Field.Picture"/> 
            properties.</para>
            <para>The <see cref="P:C1.Win.C1Report.Field.LinkTarget"/> expression is always evaluated, regardless of the setting of the <see cref="P:C1.Win.C1Report.Field.Calculated"/> 
            property (which only applies to the display text). This allows you to bind the <see cref="P:C1.Win.C1Report.Field.LinkTarget"/> to a field in the 
            data source, as show in the example below.</para>
            </remarks>
            <example>
            The code below creates two hyperlink fields, one with a static value and one based on a database value.
            <code>
            // set up a static link
            Field f = c1r.Fields["companyInfoLink"];
            f.Calculated = false;
            f.Text = "click here for more info on our company";
            f.LinkTarget = "http://myrealty.com";
            
            // set up a databound link
            Field f = c1r.Fields["propertyInfoLink"];
            f.Calculated = false;
            f.Text = "click here for more info on this property";
            f.LinkTarget = "\"http://myrealty.com/moreinfo?id=\" &amp; propertyID";
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.Subreport">
            <summary>
            Gets or sets a reference to another report to be rendered within the field (a <i>subreport</i>).
            </summary>
            <remarks>
            <para>A subreport is a report that is inserted in another report. Subreports are useful when you want to combine 
            several reports into one. For example, you may have a main report that integrates several subreports into a single 
            main report. Or you can use the main report to show detailed information and use subreports to show summary data 
            at the beginning of each group.</para>
            <para>For some real-world examples, check the "Sales By Category" and "Sales By Year" reports in the NWIND.XML
            sample that ships with the control.</para>
            <para>To define a field as a subreport, you should start by loading the subreport, then assign the subreport 
            control to the field's <see cref="P:C1.Win.C1Report.Field.Subreport"/> property.</para>
            <para>Next, link the subreport to the main report using the subreport field's <see cref="P:C1.Win.C1Report.Field.Text"/> property (this is 
            analogous to setting the <b>LinkChildFields/LinkMasterFields</b> properties in a Microsoft  Access subreport). The 
            <b>Text</b> property in a subreport field is used as a filter. It specifies which records in the source recordset 
            should be used to render the subreport based on the current record for the main report.</para>
            <para>When the main report is being rendered and reaches the subreport field, the <b>Text</b> expression is evaluated 
            and the result is uses as a filter condition for the subreport.</para>
            <para>Building the link expression is not difficult, but it is a little tricky because it requires you to create a 
            string that contains quotes, and these internal quotes must be doubled (written as "").</para>
            <para>If you are creating reports using the Report Designer, you don't have to worry about building the link expressions 
            in code. Instead, right-click the subreport field and select the <b>Link Subreport...</b> menu. This will show a dialog 
            where you can select the master and detail fields. When you click OK, the Report Designer will build the link expression 
            and assign it to the <b>Text</b> property of the subreport field automatically.</para>
            <para>Subreport fields usually have the <see cref="P:C1.Win.C1Report.Field.CanGrow"/> property set to true, so the subreport field can expand to 
            include all its records.</para>
            <para>Subreports may contain other subreports. There's no set limit for the depth of report nesting you can have. 
            However, there must be no circular references to reports. In other words, a report cannot contain a reference to itself 
            as a subreport.</para>
            </remarks>
            <example>
            <code>
            // load subreport and assign it to a field in the main report
            string sSub = "Sales By Category Subreport";
            c1Sub.Load("NWIND.XML", sSub);
            c1rMain.Fields[sSub].Subreport = c1Sub;
            
            // set up connection between main report and subreport
            c1rMain.Fields[sSub].Calculated = true;
            c1rMain.Fields[sSub].Text = "\"CategoryName = '\" &amp; [CategoryName] &amp; \"'\"";
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.SubreportHasData">
            <summary>
            Returns whether a subreport has data and suppresses rendering if it doesn't.
            </summary>
            <remarks>
            This property allows you to check whether a subreport has data and prevent it from rendering if it doesn't. 
            </remarks>
            <example>
            The code below uses script to hide sections with empty subreports:
            <code>
            _c1r.Sections.Detail.OnPrint = "Detail.Visible = fSubreport.SubreportHasData"
            </code>
            The code below uses script to hide a field containing an empty subreport and show another field instead:
            <code>
            _c1r.Sections.Detail.OnPrint = 
                "hasData = fSubreport.SubreportHasData\r\n" +
                "fSubreport.Visible = hasData" +
                "fNoData.Visible = Not hasData\r\n" +
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Field.LinkValue">
            <summary>
            Returns the value of the LinkTarget expression.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Field.BackStyle">
            <summary>
            This property is obsolete. Set the <see cref="P:C1.Win.C1Report.Field.BackColor"/> property to Color.Transparent instead.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.FieldCollection">
            <summary>
            FieldCollection class represents a collection of the <see cref="T:C1.Win.C1Report.Field"/> objects. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.CopyTo(C1.Win.C1Report.Field[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from collection. 
            The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a field to a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
            <param name="text">Contains the value for the new field's <see cref="P:C1.Win.C1Report.Field.Text"/> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.Win.C1Report.Field.Calculated"/> property. By default, <see cref="P:C1.Win.C1Report.Field.Calculated"/> is set to false and the text 
            is rendered as-is.</param>
            <param name="left">Left coordinate of the new field, in twips, with respect to its containing section.</param>
            <param name="top">Top coordinate of the new field, in twips, with respect to its containing section.</param>
            <param name="width">Width of the new field, in twips.</param>
            <param name="height">Height of the new field, in twips.</param>
            <returns>A reference to the newly added field.</returns>
            <remarks>
            <para>If you add a field to a section's <see cref="P:C1.Win.C1Report.Section.Fields"/> collection, the new field is automatically 
            assigned to that section.</para>
            <para>If you add a field to the control's <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="P:C1.Win.C1Report.Field.Section"/> property or it will not be 
            rendered in the report.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Add(System.String,System.String,System.Drawing.Rectangle)">
            <summary>
            Adds a field to a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
            <param name="text">Contains the value for the new field's <see cref="P:C1.Win.C1Report.Field.Text"/> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.Win.C1Report.Field.Calculated"/> property. By default, <see cref="P:C1.Win.C1Report.Field.Calculated"/> is set to false and the text 
            is rendered as-is.</param>
            <param name="rc">Defines the position of the field, in twips, with respect to its containing section.</param>
            <returns>A reference to the newly added field.</returns>
            <remarks>
            <para>If you add a field to a section's <see cref="P:C1.Win.C1Report.Section.Fields"/> collection, the new field is automatically 
            assigned to that section.</para>
            <para>If you add a field to the control's <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="P:C1.Win.C1Report.Field.Section"/> property or it will not be 
            rendered in the report.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Add(C1.Win.C1Report.Field)">
            <summary>
            Adds a field or a clone of a field to a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="field">A <see cref="T:C1.Win.C1Report.Field"/> object to add to the collection.</param>
            <returns>A reference to the newly added field.</returns>
            <remarks>
            In the field does not belong to any reports, it is added to the collection. If the field already
            belongs to a report, a clone is created and added to the collection.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="index">Specifies the field to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Remove(System.Int32)">
            <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="index">Specifies the field to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Remove(System.String)">
            <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="name">The name of the field to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Remove(C1.Win.C1Report.Field)">
            <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <param name="f">The field to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a specific field.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>True if the collection contains a field with the specified name;
             otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.FieldCollection.Contains(C1.Win.C1Report.Field)">
            <summary>
            Determines whether the collection contains a specific field.
            </summary>
            <param name="f">Reference to the <see cref="T:C1.Win.C1Report.Field"/> object.</param>
            <returns>True if the collection contains specified field;
             otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.C1Report.FieldCollection.Item(System.Int32)">
            <summary>
            Returns a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <remarks>The index parameter may be an integer between zero and <see cref="P:C1.Win.C1Report.FieldCollection.Count"/>-1.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.FieldCollection.Item(System.String)">
            <summary>
            Returns a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
            <remarks>The name parameter may be a string containing a field name.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.FieldCollection.Count">
            <summary>
            Returns the number of fields in a <see cref="P:C1.Win.C1Report.C1Report.Fields"/> collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.SortEnum">
            <summary>
            Specifies how groups should be sorted.
            </summary>
            <remarks>Use the members of this enumeration to set the value of 
            the <see cref="P:C1.Win.C1Report.Group.Sort"/> property in the <see cref="T:C1.Win.C1Report.Group"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.SortEnum.NoSort">
            <summary>
            Do not sort records for this group.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SortEnum.Ascending">
            <summary>
            Sort records in ascending order.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SortEnum.Descending">
            <summary>
            Sort records in descending order.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.KeepTogetherEnum">
            <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
            <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Group.KeepTogether"/> and 
            <see cref="P:C1.Win.C1Report.Section.KeepTogether"/> property in the <see cref="T:C1.Win.C1Report.Group"/> and <see cref="T:C1.Win.C1Report.Section"/> classes.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.KeepTogetherEnum.KeepNothing">
            <summary>
            Do not try to keep the group together.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.KeepTogetherEnum.KeepWholeGroup">
            <summary>
            Keep the group header, detail, and footer together on a page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.KeepTogetherEnum.KeepFirstDetail">
            <summary>
            Keep the group header and first detail section together on a page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Group">
            <summary>
            Object used to sort and group report data. 
            </summary>
            <remarks>
            Each <b>Group</b> has a Header section and a Footer section that can be used to display
            aggregate information for the group.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.Group.Move(System.Int32,System.Boolean)">
            <summary>
            Moves a group to a new position in the <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection, optionally 
            adjusting its <see cref="P:C1.Win.C1Report.C1Report.Sections"/> and <see cref="P:C1.Win.C1Report.C1Report.Fields"/>.
            </summary>
            <param name="newIndex">Contains the new position for the group (index into the <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection).</param>
            <param name="adjustSections">Determines whether only the group should be moved or whether its header and footer sections, 
            along with all the fields in those sections, should also be moved.</param>
            <remarks>
            This method is useful in designer applications, when you want to allow users to change the grouping order.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Group.Name">
            <summary>
            Gets or sets the group name.
            </summary>
            <remarks>The group name can be used as an index into the control's <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Group.GroupBy">
            <summary>
            Gets or sets the expression used to break records into groups.
            </summary>
            <remarks>This property contains a <b>VBScript</b> expression that is evaluated for every record 
            in the source recordset. A new group is started whenever the value of this expression changes. 
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Group.Sort">
            <summary>
            Gets or sets how the group is sorted.
            </summary>
            <remarks>
            <para>The specified sorting is applied to the content of the <see cref="P:C1.Win.C1Report.Group.GroupBy"/> property. For example, 
            if <see cref="P:C1.Win.C1Report.Group.GroupBy"/> contains the expression "FirstName" and <see cref="P:C1.Win.C1Report.Group.Sort"/> is set to "Ascending", 
            then the group will be sorted in ascending order based on the content of the "FirstName" column in the data source.</para>
            <para>Note that the sorting is performed by the data source itself, not by C1Report. Because of this, sorting 
            is always based on column names rather than calculated expressions. If the <see cref="P:C1.Win.C1Report.Group.GroupBy"/> property contains a
            calculated expression, the component will extract the first column name from the expression and will sort based on that 
            value. For example, if <see cref="P:C1.Win.C1Report.Group.GroupBy"/> is set to "Left(FirstName, 3)", the sorting will be based on the 
            "FirstName" column, not on the first three characters of the first names.</para>
            <para>This can present problems in a few cases, especially if you want ot sort based on date parts (year, month, quarter). 
            In these cases, the recommended procedure is to add a calculated column to the data source (by changing the SQL statement 
            used to retrieve the data), then set the <see cref="P:C1.Win.C1Report.Group.GroupBy"/> property to the name of the calculated column.</para>
            </remarks>
            <example>
            The code below uses a SQL statement to add a "HireQuarter" column to the data source, then sorts a group based on 
            this new column. The report will show employees sorted by the quarter when they were hired.
            <code>
            string sql = 
                "SELECT *, DATEPART('q', HireDate) AS HireQuarter " +
                "FROM Employees";
            c1r.DataSource.RecordSource = sql;
            c1r.Groups[0].GroupBy = "HireQuarter";
            c1r.Groups[0].Sort = SortEnum.Ascending;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Group.KeepTogether">
            <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
            <seealso cref="T:C1.Win.C1Report.KeepTogetherEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Group.SectionHeader">
            <summary>
            Returns the <see cref="T:C1.Win.C1Report.Section"/> used as this group's header.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Group.SectionFooter">
            <summary>
            Returns the <see cref="T:C1.Win.C1Report.Section"/> used as this group's footer.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Group.Tag">
            <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Group.ParentReport">
            <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report"/> object that contains this <see cref="T:C1.Win.C1Report.Group"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.RenderGroup">
            <summary>
            RenderGroup is an internal helper class to keep group rendering
            information in a stack while groups are rendered. This allows
            for repeating group headers and database cursor maintenance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.GroupCollection">
            <summary>
            GroupCollection class represents a collection of the <see cref="T:C1.Win.C1Report.Group"/> objects. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.CopyTo(C1.Win.C1Report.Group[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied 
            from the collection. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.Add(System.String,System.String,C1.Win.C1Report.SortEnum)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1Report.Group"/> to the collection, along with header and footer sections for the new group. 
            </summary>
            <param name="name">Contains the name of the new group.</param>
            <param name="groupBy">Contains the value of the <see cref="P:C1.Win.C1Report.Group.GroupBy"/> property for the new group.</param>
            <param name="sort">Contains the value of the <see cref="P:C1.Win.C1Report.Group.Sort"/> property for the new group.</param>
            <returns>A reference to the newly added group.</returns>
            <remarks>
            When a group is added to a report, the control automatically adds two new sections, the group header and group 
            footer sections for the new group. These new sections are invisible by default.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.Remove(System.Int32)">
            <summary>
            Removes a <see cref="T:C1.Win.C1Report.Group"/> from the <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection, 
            and its header/footer sections from the <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.
            </summary>
            <param name="index">Specifies the group to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:C1.Win.C1Report.Group"/> from the <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection, 
            and its header/footer sections from the <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.
            </summary>
            <param name="name">The name of the group to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.Remove(C1.Win.C1Report.Group)">
            <summary>
            Removes a <see cref="T:C1.Win.C1Report.Group"/> from the <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection, 
            and its header/footer sections from the <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.
            </summary>
            <param name="group">The group to be removed.</param>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a specific group.
            </summary>
            <param name="name">The name of the group.</param>
            <returns>True if the collection contains a group with the specified name;
             otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Report.GroupCollection.Contains(C1.Win.C1Report.Group)">
            <summary>
            Determines whether the collection contains a specific group.
            </summary>
            <param name="g">Reference to the <see cref="T:C1.Win.C1Report.Group"/> object.</param>
            <returns>True if the collection contains specified field;
             otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.C1Report.GroupCollection.Item(System.Int32)">
            <summary>
            Returns a group from a <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection.
            </summary>
            <remarks>The index parameter may be an integer between zero and <see cref="P:C1.Win.C1Report.GroupCollection.Count"/>-1.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.GroupCollection.Item(System.String)">
            <summary>
            Returns a group from a <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection.
            </summary>
            <remarks>The name parameter may be a string containing a group name.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.GroupCollection.Count">
            <summary>
            Returns the number of groups in a <see cref="P:C1.Win.C1Report.C1Report.Groups"/> collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ImageList">
            <summary>
            Summary description for ImageList.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.OrientationEnum">
            <summary>
            Specifies the page orientation.
            </summary>
            <remarks>Use the members of this enumeration to set the value of the 
            <see cref="P:C1.Win.C1Report.Layout.Orientation"/> property in the <see cref="T:C1.Win.C1Report.Layout"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.OrientationEnum.Auto">
            <summary>
            Set the orientation automatically, based on the current <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> 
            and report width (<see cref="P:C1.Win.C1Report.Layout.Width"/>).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.OrientationEnum.Portrait">
            <summary>
            Use Portrait orientation (tall).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.OrientationEnum.Landscape">
            <summary>
            Use Landscape orientation (wide).
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ColumnLayoutEnum">
            <summary>
            Specifies the layout for the columns (down or across).
            </summary>
            <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Layout.ColumnLayout"/> property 
            in the <see cref="T:C1.Win.C1Report.Layout"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.ColumnLayoutEnum.Down">
            <summary>
            Columns are laid out down the page, then across.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ColumnLayoutEnum.Across">
            <summary>
            Columns are laid out across the page, then down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ColumnLayoutEnum.Labels">
            <summary>
            Causes the report designer to discount label spacing in the design surface, 
            hide header/footer sections, disable grouping button, 
            and disable automatic section resizing when fields are moved or dragged.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.HdrFtrEnum">
            <summary>
            Specifies where the Page Footer and Page Header sections are displayed.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Layout.PageFooter"/> and <see cref="P:C1.Win.C1Report.Layout.PageHeader"/> properties 
            in the <see cref="T:C1.Win.C1Report.Layout"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.HdrFtrEnum.AllPages">
            <summary>
            The page footer and header are printed on all pages of a report. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.HdrFtrEnum.NotWithReportHdr">
            <summary>
            The page header isn't printed on the same page as the report header. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.HdrFtrEnum.NotWithReportFtr">
            <summary>
            The page footer isn't printed on the same page as the report footer. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.HdrFtrEnum.NotWithReportHdrFtr">
            <summary>
            The page footer and header are not printed on a page that has either a report header or a report footer.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.PictureShowEnum">
            <summary>
            Specifies where the background picture is displayed.
            </summary>
            <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Layout.PictureShow"/> property in the <see cref="T:C1.Win.C1Report.Layout"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.PictureShowEnum.NoPages">
            <summary>
            Do not show the background picture.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureShowEnum.AllPages">
            <summary>
            Show the background picture on all pages.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureShowEnum.FirstPage">
            <summary>
            Show the background picture on the first page only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.PictureShowEnum.AllButFirstPage">
            <summary>
            Show the background picture on all pages but the first.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Layout">
            <summary>
            The Layout object controls how the report is rendered on pages.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.Layout.ToString">
            <summary>
            Returns a description of layout to show it in designer. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Report.Layout.UpdateFromPrintDoc">
            <summary>
            Copies information from <see cref="T:C1.Win.C1Report.PrintDoc"/> to <see cref="T:C1.Win.C1Report.Layout"/> object.
            </summary>
            <returns>True if <see cref="T:C1.Win.C1Report.Layout"/> object was changed.</returns>
            <remarks>This is useful if you want to make changes to the <see cref="T:System.Drawing.Printing.PageSettings"/>
            object instead of the <see cref="T:C1.Win.C1Report.Layout"/> object.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.Width">
            <summary>
            Gets or sets the width of the report's detail section, in twips.
            </summary>
            <remarks>
            <para>This property determines the width of the detail section of the report.</para>
            <para>Multi-column reports have header and footer sections that span all columns so their actual width is 
            <see cref="P:C1.Win.C1Report.Layout.Width"/> * <see cref="P:C1.Win.C1Report.Layout.Columns"/>.</para>
            <para>For example, a two-column report with a one-inch wide detail section would have <b>Width</b> = 1440, 
            and its total width would be 2 * 1440 = 2880.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.MarginLeft">
            <summary>
            Gets or sets the left margin for each page, in twips.
            </summary>
            <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> and <see cref="P:C1.Win.C1Report.Layout.Orientation"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.MarginRight">
            <summary>
            Gets or sets the right margin for each page, in twips.
            </summary>
            <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> and <see cref="P:C1.Win.C1Report.Layout.Orientation"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.MarginTop">
            <summary>
            Gets or sets the top margin for each page, in twips.
            </summary>
            <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> and <see cref="P:C1.Win.C1Report.Layout.Orientation"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.MarginBottom">
            <summary>
            Gets or sets the bottom margin for each page, in twips.
            </summary>
            <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> and <see cref="P:C1.Win.C1Report.Layout.Orientation"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.Columns">
            <summary>
            Gets or sets the number of detail columns.
            </summary>
            <remarks>
            <para>Use this property to create multi-column reports.</para>
            <para>In multi-column reports, header and footer sections span the full width of the report. 
            Only the detail section is rendered in multiple columns. Use the <see cref="P:C1.Win.C1Report.Layout.Width"/> property to specify the width 
            of each column, and the <see cref="P:C1.Win.C1Report.Layout.ColumnLayout"/> property to specify whether columns should be laid out across 
            the page or down the page.</para>
            <para>Multi-column reports are useful for printing reports on mailing labels and other types of multi-column 
            pre-printed forms. They are also useful for creating compact reports where detail information is laid out across 
            the page.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.ColumnLayout">
            <summary>
            Gets or sets the layout for the columns (down or across).
            </summary>
            <seealso cref="T:C1.Win.C1Report.ColumnLayoutEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PaperSize">
            <summary>
            Gets or sets the paper size for the report.
            </summary>
            <seealso cref="T:System.Drawing.Printing.PaperKind"/>
        </member>
        <member name="P:C1.Win.C1Report.Layout.CustomWidth">
            <summary>
            Gets or sets the custom width for the report, in twips.
            </summary>
            <remarks>
            <para>To create reports using custom paper sizes, set the <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> property to 
            <see cref="F:System.Drawing.Printing.PaperKind.Custom"/>, then set the <see cref="P:C1.Win.C1Report.Layout.CustomWidth"/> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight"/> properties 
            to the size of the page measured in twips.</para>
            <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> is set to a value other than <see cref="F:System.Drawing.Printing.PaperKind.Custom"/>, the paper size 
            is determined by that setting. The <see cref="P:C1.Win.C1Report.Layout.CustomWidth"/> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight"/> properties are not 
            used in this case.</para>
            <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> is set to <see cref="F:System.Drawing.Printing.PaperKind.Custom"/> and the <see cref="P:C1.Win.C1Report.Layout.CustomWidth"/> or 
            <see cref="P:C1.Win.C1Report.Layout.CustomHeight"/> properties are set to zero, the printer's default paper size is used.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.CustomHeight">
            <summary>
            Gets or sets the custom height for the report, in twips.
            </summary>
            <remarks>
            <para>To create reports using custom paper sizes, set the <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> property to 
            <see cref="F:System.Drawing.Printing.PaperKind.Custom"/>, then set the <see cref="P:C1.Win.C1Report.Layout.CustomWidth"/> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight"/> properties 
            to the size of the page measured in twips.</para>
            <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> is set to a value other than <see cref="F:System.Drawing.Printing.PaperKind.Custom"/>, the paper size 
            is determined by that setting. The <see cref="P:C1.Win.C1Report.Layout.CustomWidth"/> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight"/> properties are not 
            used in this case.</para>
            <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize"/> is set to <see cref="F:System.Drawing.Printing.PaperKind.Custom"/> and the <see cref="P:C1.Win.C1Report.Layout.CustomWidth"/> or 
            <see cref="P:C1.Win.C1Report.Layout.CustomHeight"/> properties are set to zero, the printer's default paper size is used.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.Orientation">
            <summary>
            Gets or sets the page orientation.
            </summary>
            <seealso cref="T:C1.Win.C1Report.OrientationEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PageHeader">
            <summary>
            Gets or sets a value that determines on which pages the Page Header section should be displayed.
            </summary>
            <remarks>
            <para>You can use the <b>PageHeader</b> and <b>PageFooter</b> properties to specify whether a report's page header or 
            page footer should be printed on the same page as a report header or report footer.</para>
            <para>For example, you might not want to print a page header containing the page number on the first page of a report 
            if the report header is a cover sheet.</para>
            </remarks>
            <seealso cref="T:C1.Win.C1Report.HdrFtrEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PageFooter">
            <summary>
            Gets or sets a value that determines on which pages the Page Footer section should be displayed.
            </summary>
            <seealso cref="T:C1.Win.C1Report.HdrFtrEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Layout.Picture">
            <summary>
            Gets or sets a background picture for the report body.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1Report.Layout.Picture"/> property to specify a bitmap or other type of graphic to be displayed as a 
            background picture on a report (watermark-style).</para>
            <para>Use the <see cref="P:C1.Win.C1Report.Layout.PictureShow"/>, <see cref="P:C1.Win.C1Report.Layout.PictureAlign"/>, and <see cref="P:C1.Win.C1Report.Layout.PictureScale"/> properties 
            to specify which pages should display the picture and how it should be aligned and scaled.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PictureAlign">
            <summary>
            Gets or sets how the background picture is aligned.
            </summary>
            <remarks>
            To select the background picture and which pages should display it, use the <see cref="P:C1.Win.C1Report.Layout.Picture"/> and 
            <see cref="P:C1.Win.C1Report.Layout.PictureShow"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PictureScale">
            <summary>
            Gets or sets how the background picture is aligned.
            </summary>
            <para>This property determines how background images are scaled to fit the page. Depending on the setting of 
            this property, images may be clipped, stretched, scaled (which preserves the image's aspect ratio), tiled, 
            or hidden.</para>
            <para>This property works with the <see cref="P:C1.Win.C1Report.Layout.PictureAlign"/> property so you can control image scaling and 
            alignment independently.</para>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PictureShow">
            <summary>
            Gets or sets where the background picture is displayed.
            </summary>
            <remarks>
            To select the background picture and how it should be aligned on the page, use the <see cref="P:C1.Win.C1Report.Layout.Picture"/>,
            <see cref="P:C1.Win.C1Report.Layout.PictureAlign"/>, and <see cref="P:C1.Win.C1Report.Layout.PictureScale"/> properties.
            </remarks>
            <seealso cref="T:C1.Win.C1Report.PictureShowEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Layout.LabelSpacingX">
            <summary>
            Used by the designer to discount horizontal label spacing in the design surface.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Layout.LabelSpacingY">
            <summary>
            Used by the designer to discount vertical label spacing in the design surface.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Layout.OverlayReplacements">
            <summary>
            Gets a dictionary (<see cref="T:System.Collections.IDictionary"/>) with replacements 
            to be made in the report body.
            </summary>
            <remarks>
            <para>This property is useful when implementing export filters.</para>
            <para>Reports that contain page counts or group page counts save special tags in
            the report body. When the report finishes rendering, these tags need to be replaced
            with the actual page counts. Filters can get the list of tags and the replacement
            values using this dictionary. The key-value pairs in the dictionary contain the
            tags and their replacements.</para>
            </remarks>
            <example>
            The code below shows part of a text filter implementation. The <b>EndReport</b>
            method gets the overlay replacement dictionary and calls a <b>ReplaceInStream</b>
            method that scans each line in the stream and replaces any keys with the 
            corresponding values. For example, the total page count would be represented
            by a key similar to "#pages#", which would be replaced everywhere in the stream
            with the actual page count.
            <code>
            public class MyTextFilter : ExportFilter
            {
              // ...
              override public void EndReport()
              {
                // close output stream
                Layout layout = _ownerReport.GetLayout();
                ReplaceInStream(_exportStream, layout.OverlayReplacements);
                _exportStream.Close();
              }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.Layout.PageSize">
            <summary>
            Gets the current page size, in twips.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Layout.ParentReport">
            <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report"/> that contains this <see cref="T:C1.Win.C1Report.Layout"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ReportParameterCollection">
            <summary>
            Contains a collection of <see cref="T:C1.Win.C1Report.ReportParameter"/> objects.
            </summary>
            <remarks>
            This collection is made available as a parameter in the 
            <see cref="F:C1.Win.C1Report.C1Report.InitializeParametersDialog"/> event, and allows handlers to 
            inspect and modify report parameter values while handling the event.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.ReportParameterCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of members of the collection to an array, starting at the specified index.
            </summary>
            <param name="array">Array that will receive the collection members.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:C1.Win.C1Report.ReportParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the collection.
            </summary>
            <returns>An enumerator that can iterate through the collection.</returns>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameterCollection.Item(System.String)">
            <summary>
            Gets a report parameter by name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameterCollection.Item(System.Int32)">
            <summary>
            Gets a report parameter by index.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameterCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.Win.C1Report.ReportParameter"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameterCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameterCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ReportParameter">
            <summary>
            Represents a parameter in a parameterized report data source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportParameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ReportParameterDialog">
            <summary>
            ReportParameterDialog builds and displays a dialog to collect parameter values 
            from the user.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ParamQuery">
            <summary>
            Summary description for ParamQuery.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.PrintDoc">
            <summary>
            Summary description for PrintDoc.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.IC1ReportRecordset">
            <summary>
            Interface used to access report data from data source objects.
            </summary>
            <remarks>
            <para>Any object that can be used as custom data source for reports must implement this interface.</para>
            <para>The <see cref="T:C1.Win.C1Report.C1Report"/> component provides this implementation for common data sources such
            as <see cref="T:System.Data.DataTable"/> and <see cref="T:System.Data.DataView"/> classes.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetFieldNames">
            <summary>
            Gets a string vector with the names of each field in the data source.
            </summary>
            <returns>A string vector with the names of each field in the data source.</returns>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetFieldTypes">
            <summary>
            Gets a vector with the types of each field in the data source.
            </summary>
            <returns>A vector with the types of each field in the data source.</returns>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetFieldValue(System.Int32)">
            <summary>
            Gets the value of the given field, at the cursor position.
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns>Value of the field.</returns>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.BOF">
            <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.EOF">
            <summary>
            Returns true if the cursor is pointing past the last record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.MoveFirst">
            <summary>
            Moves the cursor to the first record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.MoveLast">
            <summary>
            Moves the cursor to the last record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.MovePrevious">
            <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.MoveNext">
            <summary>
            Moves the cursor to the next record in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetBookmark">
            <summary>
            Returns the current cursor position.
            </summary>
            <returns>Index of current record.</returns>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.SetBookmark(System.Int32)">
            <summary>
            Sets the current cursor position to supplied value.
            </summary>
            <param name="bkmk">Index of record.</param>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.ApplyFilter(System.String)">
            <summary>
            Applies a filter string. See the <see cref="P:System.Data.DataView.RowFilter"/> property for details.
            </summary>
            <param name="filter">Filter string.</param>
        </member>
        <member name="M:C1.Win.C1Report.IC1ReportRecordset.ApplySort(System.String)">
            <summary>
            Applies a sort string. See the <see cref="P:System.Data.DataView.Sort"/> property for details.
            </summary>
            <param name="sort">Sort string.</param>
        </member>
        <member name="T:C1.Win.C1Report.RecordsetWrapper">
            <summary>
            RecordsetWrapper
            
            Wrapper for DataView objects that implements the IC1ReportRecordset
            interface.
            
            Used by default with the object created by the DataSource object
            using the ConnectionString and RecordSource members.
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.DataAccessException">
            <summary>
            <see cref="T:System.Exception"/> that is thrown when a data access error occurs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataAccessException.#ctor">
            <summary>
            Initializes a new instance of the DataAccessException class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.DataAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataAccessException class with a specified error message.
            </summary>
            <param name="msg">A message that describes the error.</param>
        </member>
        <member name="M:C1.Win.C1Report.DataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataAccessException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The error message that explains the reason for the exception.</param>
            <param name="x">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:C1.Win.C1Report.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataAccessException class with serialized data.
            </summary>
            <param name="si">The object that holds the serialized object data.</param>
            <param name="sc">The contextual information about the source or destination.</param>
        </member>
        <member name="T:C1.Win.C1Report.FileFormatEnum">
            <summary>
            Specifies the format of the export file.
            </summary>
            <remarks>Use the members of this enumeration to set parameter 
            of the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)"/> method in the <see cref="T:C1.Win.C1Report.C1Report"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.HTML">
            <summary>
            Plain HTML format. This setting creates a single HTML file that can be viewed in any web browser.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.HTMLPaged">
            <summary>
            Paged HTML format. This setting creates one HTML file for each page in the report, with links to navigate between pages.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.HTMLDrillDown">
            <summary>
            Drill-down HTML format. This setting creates a single HTML file with collapsible headings. When viewed in a 
            DHTML-capable browser, clicking group headers causes them to collapse and expand to show the detail.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.PDF">
            <summary>
            Adobe PDF format. This setting creates a PDF file that can be viewed using Adobe Acrobat software.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.PDFEmbedFonts">
            <summary>
            Adobe PDF format with embedded fonts. This setting creates a PDF file that can be viewed using Adobe Acrobat software.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.Text">
            <summary>
            Plain text. This setting creates a plain ASCII file.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.RTF">
            <summary>
            RTF format. This setting creates an RTF file that can be opened in Microsoft Word, WordPad, or any other 
            RTF-capable text editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.Excel">
            <summary>
            Microsoft Excel files. This setting creates a BIFF-8 Excel file that can be opened with Microsoft Excel 97 or later.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.TIFF">
            <summary>
            TIFF format. This setting creates multi-page TIFF files.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.PDFPrintUtil">
            <summary>
            Deprecated. Use PDF, PDFEmbedFonts, or PDFProcted instead. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.PDFProtected">
            <summary>
            Protected PDF format. This setting creates a PDF file with a random password. The file can be opened and printed
            by anyone, but cannot be modified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.RTFLabels">
            <summary>
            RTF field-based format. This setting creates RTF files with absolutely-positioned fields. This format renders reports 
            more accurately than the plain RTF format, and is recommended for creating label-style reports.
            However, the files created with this setting are harder to edit than the plan RTF format, and can only be 
            previewed or printed correctly using Microsoft Word (this format doesn't work with WordPad).
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.FileFormatEnum.TextSinglePage">
            <summary>
            Plain text. This setting creates a plain ASCII file as a single page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.GrowShrinkModeEnum">
            <summary>
            Specifies the logic for handling CanGrow/CanShrink fields.
            </summary>
            <remarks>
            Use the members of this enumeration to set the value of the <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report"/> property in the <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report"/> class.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report">
            <summary>
            Uses the standard C1Report mode, where fields that grow or shrink affect only fields directly below.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.GrowShrinkModeEnum.Access">
            <summary>
            Uses a mode that is similar to MS Access, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.C1Report">
            <summary>
            The <b>C1Report</b> component generates Access-style, data-based banded reports that can be rendered 
            directly to a printer, exported to various portable formats (including HTML, PDF, and text), or rendered 
            into preview controls such as the Microsoft PrintPreview or ComponentOne C1PrintPreview controls.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.C1Report"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.#ctor(System.String)">
            <summary>
            This method is intented for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the component.
            </summary>
            <param name="disposing">If true, managed resources as well as unmanaged resources are released; 
            if false, only unmanaged resources are disposed.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.GetCallingAssembly">
            <summary>
            This method is intented for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnStartReport(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.StartReport"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnEndReport(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.EndReport"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnNoReportData(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.NoData"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnStartPage(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.StartPage"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnEndPage(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.EndPage"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnStartSection(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.StartSection"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnPrintSection(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.PrintSection"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnEndSection(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.EndSection"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnReportError(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.ReportError"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnInitializeParametersDialog(C1.Win.C1Report.DialogEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.InitializeParametersDialog"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.DialogEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.OnAddOutlineEntry(C1.Win.C1Report.ReportEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Report.C1Report.AddOutlineEntry"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1Report.ReportEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.GetReportList(System.String)">
            <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
            <param name="fileName">Contains the full name of the XML report definition file.</param>
            <returns>A string array containing the names of all reports in the XML file.</returns>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.GetReportList(System.Xml.XmlDocument)">
            <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="doc">Reference to <see cref="T:System.Xml.XmlDocument"/> object.</param>
            <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.GetReportInfo(System.String)">
            <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
            <param name="fileName">Contains the full name of the XML report definition file.</param>
            <returns>A string array containing the names of all reports in the XML file.</returns>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.GetReportInfo(System.Xml.XmlDocument)">
            <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument"/> that contains the reports.</param>
            <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Load(System.String,System.String)">
            <summary>
            Loads a report from an XML report definition file.
            </summary>
            <param name="fileName">Full name of the XML report definition file.</param>
            <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
            <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.Win.C1Report.C1Report.GetReportInfo(System.String)"/> method. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Load(System.Xml.XmlDocument,System.String)">
            <summary>
            Loads a report from an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument"/> that contains the reports.</param>
            <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
            <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.Win.C1Report.C1Report.GetReportInfo(System.String)"/> method. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Save(System.String)">
            <summary>
            Saves the current report definition to a file. 
            </summary>
            <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param> 
            <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Save(System.String,System.Boolean)">
            <summary>
            Saves the current report definition to a file.
            </summary>
            <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param> 
            <param name="embedAll">Whether to embed images and subreports into the output file.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Save(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the current report definition to a file.
            </summary>
            <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param> 
            <param name="embedPics">Whether to embed images into the output file.</param>
            <param name="embedSubs">Whether to embed subreports into the output file.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Save(System.Xml.XmlTextWriter)">
            <summary>
            Saves the current report definition to an <see cref="T:System.Xml.XmlTextWriter"/> object.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlTextWriter"/> object where the report definition will be saved.</param>
            <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Saves the current report definition to an XmlTextWriter object.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlTextWriter"/> object where the report definition will be saved.</param>
            <param name="embed">Whether to embed images and subreports into the output stream.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean,System.Boolean)">
            <summary>
            Saves the current report definition to an XmlTextWriter object.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlTextWriter"/> object where 
            the report definition will be saved.</param>
            <param name="embedPics">Whether to embed images into the output stream.</param>
            <param name="embedSubs">Whether to embed subreports into the output stream.</param>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Clear">
            <summary>
            Clears the current report.
            </summary>
            <remarks>
            <para>This method removes all groups, group sections, and fields from the current report.</para> 
            <para>It also resets the <see cref="P:C1.Win.C1Report.C1Report.DataSource"/> and <see cref="P:C1.Win.C1Report.C1Report.Layout"/> objects, and clears
            (but does not remove) the fixed sections that all reports have: <b>Detail</b>, <b>Header</b>, 
            <b>Footer</b>, <b>PageHeader</b>, and <b>PageFooter</b>.</para>
            <para>Use this method when you want to clear a report and start creating a new one from scratch.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Evaluate(System.String)">
            <summary>
            Evaluates a <b>VBScript</b> expression in the current report context.
            </summary>
            <param name="expression">A string with a <b>VBScript</b> expression to be evaluated.</param>
            <returns>The value of the expression.</returns>
            <remarks>
            <para>Use this method to evaluate expressions as they would be evaluated while generating a report.
            This can be useful in designer-type applications, to provide an "Immediate Window" where users can test 
            expressions.</para>
            <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="F:C1.Win.C1Report.C1Report.ReportError"/> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
            </remarks>
            <example>
            <para>Expressions may contain simple <b>VBScript</b> expressions such as:</para>
            <code>
            Console.WriteLine(_c1r.Evaluate("2+2"));
              <i>4</i>
            Console.WriteLine(_c1r.Evaluate(" \"A\" &amp; \"B\" ");
              <i>AB</i>
            </code>
            <para>Expressions may also contain references to the <b>Report</b> object and all its sub-objects. For example:</para>
            <code>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.RecordSource"));
              <i>SELECT * FROM Employees</i>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.Recordset.Fields.Count"));
              <i>7</i>
            Console.WriteLine(_c1r.Evaluate("Report.Fields(0).Name"));
              <i>FirstNameField</i>
            </code>
            <para>Finally, data fields, <see cref="T:C1.Win.C1Report.Field"/>, and <see cref="T:C1.Win.C1Report.Section"/> objects may be referenced directly by name.</para>
            <code>
            Console.WriteLine(_c1r.Evaluate("FirstNameField.Value"));
              <i>Andrew</i>
            Console.WriteLine(_c1r.Evaluate("CategoryName"));
              <i>Beverages</i>
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Execute(System.String)">
            <summary>
            Executes a <b>VBScript</b> statement in the current report context.
            </summary>
            <param name="statement">A string with <b>VBScript</b> instructions to be executed.</param>
            <remarks>
            <para>This method is similar to the <see cref="M:C1.Win.C1Report.C1Report.Evaluate(System.String)"/> method, except it does not return a value.</para>
            <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="F:C1.Win.C1Report.C1Report.ReportError"/> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.ParseExpression(System.String)">
            <summary>
            Parses a <b>VBScript</b> expression in the current report context.
            </summary>
            <param name="expression">A string with a <b>VBScript</b> expression to be parsed.</param>
            <returns>An <see cref="T:System.Exception"/> if the expression is invalid, or null if no errors
            were detected.</returns>
            <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.ParseStatement(System.String)">
            <summary>
            Parses a <b>VBScript</b> statement in the current report context.
            </summary>
            <param name="statement">A string with a <b>VBScript</b> statement to be parsed.</param>
            <returns>An <see cref="T:System.Exception"/> if the statement is invalid, or null if no errors
            were detected.</returns>
            <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.Render">
            <summary>
            Renders the report into an internal collection of images.
            </summary>
            <remarks>
            <para>This method is called implicitly when other classes access the <see cref="P:C1.Win.C1Report.C1Report.Document"/> 
            property, so you rarely have to call <see cref="M:C1.Win.C1Report.C1Report.Render"/> directly from your code.</para>
            <para>In some cases, you may want to access the report as a collection of pages,
            exposed by the <see cref="P:C1.Win.C1Report.C1Report.PageImages"/> property. To ensure that the image collection
            is available and up-to-date, call the <see cref="M:C1.Win.C1Report.C1Report.Render"/> method directly.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)">
            <summary>
            Renders the report into a <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="stream">Stream that will contain the report.</param>
            <param name="fmt">Report format to insert into the output stream.</param>
            <remarks>
            <para>This method is especially useful in ASP.NET scenarios where you want to render reports into 
            Html or Pdf streams, without creating temporary files.</para>
            <para>Not all types of report can be rendered into streams. The Excel format requires OLE compound 
            files and can only be rendered into files.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum,System.String,System.String)">
            <summary>
            Renders the report into an Html <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream that will contain the report.</param>
            <param name="fmt">Report format to insert into the output stream.</param>
            <param name="idPrefix">Unique ID used to differentiate multiple reports stored in the same stream.</param>
            <param name="fileName">Base file name used to build temporary image files.</param>
            <remarks>
            This method is used by the C1WebReport control to generate Html reports in ASP.NET pages.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)">
            <summary>
            Renders the report into a file.
            </summary>
            <param name="fileName">Name of the file that will contain the report.</param>
            <param name="fmt">Type of file to create.</param>
            <remarks>
            This method causes the control to render the current report into a file. It is especially useful in server applications 
            that create several reports in batch mode, and don't have a user interface.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)">
            <summary>
            Renders the report into an <see cref="T:C1.Win.C1Report.ExportFilter"/> object.
            </summary>
            <param name="filter">Export filter that will render the report.</param>
            <remarks>
            <para><see cref="T:C1.Win.C1Report.C1Report"/> includes several built-in export filters that allow you to export reports 
            to HTML, PDF, RTF, Excel, and other formats.</para>
            <para>You may create your own filters by creating classes that derive from any of these base filters.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.CopyFrom(C1.Win.C1Report.C1Report)">
            <summary>
            Copies a report definition from another <see cref="T:C1.Win.C1Report.C1Report"/> component.
            </summary>
            <param name="sourceReport"><see cref="T:C1.Win.C1Report.C1Report"/> that contains the report to be copied.</param>
            <remarks>
            This method is equivalent to copying the <see cref="P:C1.Win.C1Report.C1Report.ReportDefinition"/> property from one 
            <see cref="T:C1.Win.C1Report.C1Report"/> to another, but is substantially faster.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.C1Report.AddScriptObject(System.String,System.Object)">
            <summary>
            Adds an object to the report's script context.
            </summary>
            <param name="name">Name of the new object (case-insensitive).</param>
            <param name="value">Value of the new object.</param>
            <remarks>
            <para>This method allows you to add custom objects to the context of the <see cref="T:C1.Win.C1Report.C1Report"/> 
            script interpreter.</para>
            <para>The script interpreter context is cleared whenever a report starts rendering, so this method 
            should always be called from the <see cref="F:C1.Win.C1Report.C1Report.StartReport"/> event handler.</para>
            </remarks>
            <example>
            <para>The code below uses the <see cref="F:C1.Win.C1Report.C1Report.StartReport"/> event to add a variable called 
            "mainForm" to the script context. It then attaches some script to the report's <see cref="P:C1.Win.C1Report.C1Report.OnOpen"/> 
            event to show the caption of the form when the report starts rendering.</para>
            <code>
            private void _c1r_StartReport(object sender, System.EventArgs e)
            {
                _c1r.AddScriptObject("mainForm", this);
            }
            private void button1_Click(object sender, System.EventArgs e)
            {
                _c1r.OnOpen = "msgbox(mainForm.Text)";
                _c1r.Render();
            }
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1Report.C1Report.EditExpression">
            <summary>
            Delegate called by type editors to edit script expressions.
            </summary>
            <remarks>
            For details, see the <see cref="T:C1.Win.C1Report.C1Report.EditExpressionDelegate"/> delegate.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.C1Report.EditStatement">
            <summary>
            Delegate called by type editors to edit script statements.
            </summary>
            <remarks>
            For details, see the <see cref="T:C1.Win.C1Report.C1Report.EditExpressionDelegate"/> delegate.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.C1Report.EditDataSource">
            <summary>
            Delegate called by type editors to edit data sources.
            </summary>
            <remarks>
            For details, see the <see cref="T:C1.Win.C1Report.C1Report.EditDataSourceDelegate"/> delegate.
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.StartReport">
            <summary>
            Fired when the control starts rendering the report, before it opens the source recordset.
            </summary>
            <remarks>
            <para>You can use this event to provide user feedback or to make changes to the 
            <see cref="P:C1.Win.C1Report.DataSource.ConnectionString"/> and 
            <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> properties.</para>
            <para>For example, you may implement your own version of parameterized queries by asking the 
            user to provide some information and changing the <see cref="P:C1.Win.C1Report.DataSource.RecordSource"/> 
            property accordingly.</para>
            <para>You may also use this event to assign a <see cref="T:System.Data.DataTable"/> object directly to the 
            report's <see cref="P:C1.Win.C1Report.DataSource.Recordset"/> property. Applications that already have the 
            report data should do this to save time by preventing <see cref="T:C1.Win.C1Report.C1Report"/> from loading its own copy 
            of the data.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.EndReport">
            <summary>
            Fired when the control finishes rendering the report.
            </summary>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.NoData">
            <summary>
            Fired when the control starts rendering a report and the data source is empty.
            </summary>
            <remarks>
            <para>You can use this event to cancel rendering a report when the source recordset is empty.</para>
            <para>If you don't cancel the report, it will be rendered as an unbound report (a self-contained report 
            with no underlying data).</para>
            </remarks>
            <example>
            The code below cancels a report when it has no data:
            <code>
            private void c1r_NoData(object sender, EventArgs e)
            {
                _c1r.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.StartPage">
            <summary>
            Fired when the control starts rendering each page.
            </summary>
            <remarks>
            <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
            <para>You can use the <see cref="P:C1.Win.C1Report.C1Report.Cancel"/> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.Win.C1Report.C1Report.MaxPages"/> property instead.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.EndPage">
            <summary>
            Fired when the control finishes rendering each page.
            </summary>
            <remarks>
            <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
            <para>You can use the <see cref="P:C1.Win.C1Report.C1Report.Cancel"/> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.Win.C1Report.C1Report.MaxPages"/> property instead.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.StartSection">
            <summary>
            Fired before each <see cref="T:C1.Win.C1Report.Section"/> is formatted.
            </summary>
            <remarks>
            <para>When this event fires, the report fields have not been updated with the current values or sizes.</para>
            <para>This is a good point to set field formatting parameters and visibility based on the current data values.</para>
            <para>This event is equivalent to the <see cref="P:C1.Win.C1Report.Section.OnFormat"/> script property.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.PrintSection">
            <summary>
            Fired before each <see cref="T:C1.Win.C1Report.Section"/> is printed (after it has been formatted.)
            </summary>
            <remarks>
            <para>When this event fires, the field values and sizes have been set by the control.</para>
            <para>You may still make changes, but they will not affect the field layout. For example, changing a field's 
            <see cref="P:C1.Win.C1Report.Field.Text"/> property at this point will not cause it to grow or shrink.</para>
            <para>This event is equivalent to the <see cref="P:C1.Win.C1Report.Section.OnPrint"/> script property.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.EndSection">
            <summary>
            Fired when the control finishes rendering each <see cref="T:C1.Win.C1Report.Section"/>.
            </summary>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.ReportError">
            <summary>
            Fired when an error occurs while rendering a report.
            </summary>
            <remarks>
            <para>The most common types of errors found when rendering reports are:</para>
            <para>1) Invalid <see cref="P:C1.Win.C1Report.C1Report.DataSource"/> or <see cref="P:C1.Win.C1Report.C1Report.DataSource"/> parameters. 
            This usually indicates that the system could not open the specified database (a server may be off line, or 
            a database file may be in a different location than what was specified) or that the SQL syntax used for the 
            <see cref="P:C1.Win.C1Report.C1Report.DataSource"/> property contains errors.</para>
            <para>2) Error executing scripts or evaluating expressions. This usually indicates that the VBScript expression 
            used contains a syntax error. In these cases, make sure you look at the exception message. It usually contains a 
            good explanation of what caused the error.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.InitializeParametersDialog">
            <summary>
            Fired before the control displays the <b>Report Parameters</b> dialog.
            </summary>
            <remarks>
            <para>Reports that have a <b>PARAMETERS</b> clause in their <see cref="P:C1.Win.C1Report.C1Report.DataSource"/> property 
            show a dialog where the user can enter report parameters.</para>
            <para>This event fires before the dialog is displayed and allows you to customize the dialog by changing 
            its caption, font, colors, etc.</para>
            <para>You can also use this event to inspect and modify parameter values using the 
            <see cref="F:C1.Win.C1Report.DialogEventArgs.Parameters"/> collection.</para>
            <para>Finally, you can use the <see cref="F:C1.Win.C1Report.DialogEventArgs.ShowDialog"/> property to prevent the component
            from showing the parameters dialog.</para>
            </remarks>
            <example>
            The code below uses the <b>InitializeParametersDialog</b> event to modify the values
            of the report parameters and suppress the display of the parameter dialog.
            <code>
            private void c1Report1_InitializeParametersDialog(object sender, 
                     C1.Win.C1Report.DialogEventArgs e)
            {
              // change parameter values
              ReportParameterCollection p = e.Parameters;
              p["TheString"].Value = "east";
              p["TheNumber"].Value = 12;
              p["TheDate"].Value   = DateTime.Now;
              p["TheBool"].Value   = true;
              
              // don't show dialog
              e.ShowDialog = false;
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1Report.C1Report.AddOutlineEntry">
            <summary>
            Fired before the control adds an outline entry to the report.
            </summary>
            <remarks>
            <para>Some report output formats include an outline that is built Based on the report groups. For example, PDF
            reports show this outline on the left pane of the reader application.</para>
            <para>The outline contains one entry for each group header, and the entry text is based on the value of
            the <see cref="P:C1.Win.C1Report.Group.GroupBy"/> expression for the group.</para>
            <para>This event allows you to change or suppress the text that appears on the outline.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.ReportName">
            <summary>
            Gets or sets the name of the report (used with the Load method).
            </summary>
            <remarks>
            <para>This property identifies the report when it is saved in a report definition file.</para>
            <para>To retrieve a report from a report definition file, use the <see cref="M:C1.Win.C1Report.C1Report.Load(System.String,System.String)"/> method 
            and pass this name as a parameter.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.ReportInfo">
            <summary>
            Gets or sets a <see cref="P:C1.Win.C1Report.C1Report.ReportInfo"/> object containing report metadata.
            </summary>
            <remarks>
            <para>Reports may include general information such as a title, author, and keywords.</para>
            <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.DataSource">
            <summary>
            Gets a reference to the report's <see cref="P:C1.Win.C1Report.C1Report.DataSource"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Layout">
            <summary>
            Gets a reference to the report's <see cref="P:C1.Win.C1Report.C1Report.Layout"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Font">
            <summary>
            Gets or sets the default font for new fields.
            </summary>
            <remarks>
            This property is not used directly when rendering the report. It is used as the default font for new fields.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.MaxPages">
            <summary>
            Gets or sets the maximum number of pages allowed for a report.
            </summary>
            <remarks>
            <para>This property is useful if you want to limit the maximum number of pages in a report.</para>
            <para>For example, you may write a report designer with a preview window that shows only the first 
            five pages of a report.</para>
            <para>Setting this property to zero allows reports of any length.</para>
            <para>You can also limit the size of reports by setting the 
            <see cref="P:C1.Win.C1Report.DataSource.MaxRecords"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.DoEvents">
            <summary>
            Specifies whether the control should handle Windows messages while rendering reports.
            </summary>
            <remarks>
            <para>Setting this property to true allows users to resize forms, click buttons, etc. while reports are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a 
            "Cancel Report" button (otherwise users wouldn't be able to click the button until the report was done).</para>
            <para>Setting this property to false will cause reports to render slightly faster.</para>
            </remarks>
            <example>
            <para>The code belows implements "Render" and a "Cancel" buttons attached to a <see cref="T:C1.Win.C1Report.C1Report"/> component.</para>
            <para>The "Render" button checks whether the <see cref="T:C1.Win.C1Report.C1Report"/> component is busy before starting to render a report.
            This is necessary because the user could click the "Render" button several times in a row, before the component got a 
            chance to finish rendering the report. (Calling the <see cref="M:C1.Win.C1Report.C1Report.Render"/> method while the component is busy throws an 
            <see cref="T:System.Exception"/>).</para>
            <para>The "Cancel" button checks whether the component is rendering a report and sets the <see cref="P:C1.Win.C1Report.C1Report.Cancel"/> 
            property to true.</para>
            <code>
            _c1r.DoEvents = true;
            
            private void Render_Click(object sender, EventArgs e)
            {
               if (_c1r.IsBusy)
               {
                   Console.WriteLine("Cannot render now, component is busy");
               } 
               else 
               {
                   ppv.Document = c1r.Document;
               } 
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_c1r.IsBusy) 
               {
                   _c1r.Cancel = true;
               } 
               else 
               {
                   Console.WriteLine("No report to cancel");
               }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.OnOpen">
            <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering.
            </summary>
            <remarks>
            <para>The control also fires the <see cref="F:C1.Win.C1Report.C1Report.StartReport"/> event at this time.</para>
            <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering starts.</para>
            <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.OnClose">
            <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report finishes rendering.
            </summary>
            <remarks>
            <para>The control also fires the <see cref="F:C1.Win.C1Report.C1Report.EndReport"/> event at this time.</para>
            <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering finishes.</para>
            <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.OnNoData">
            <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering and its source recordset is empty.
            </summary>
            <remarks>
            <para>The control also fires the <see cref="F:C1.Win.C1Report.C1Report.NoData"/> event at this time.</para>
            <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to cancel rendering reports with no data.</para>
            <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when the source recordset is 
            empty.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.OnPage">
            <summary>
            Gets or sets the <b>VBScript</b> that is executed when a new page is created.
            </summary>
            <remarks>
            <para>The control also fires the <see cref="F:C1.Win.C1Report.C1Report.StartPage"/> event at this time.</para>
            <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to update a label showing how many pages have been rendered so far.</para>
            <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that updates a variable at every page break.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.OnError">
            <summary>
            Gets or sets the <b>VBScript</b> that is executed when an error occurs.
            </summary>
            <remarks>
            <para>The control also fires the <see cref="F:C1.Win.C1Report.C1Report.ReportError"/> event at this time.</para>
            <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a an application dialog box when an error occurs.</para>
            <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when an error occurs.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Page">
            <summary>
            Gets or sets the current page number.
            </summary>
            <remarks>
            <para>This property is a global variable available to <b>VBScript</b> expressions.</para>
            <para>It is automatically initialized by the control with the value 1 when a report starts rendering, 
            and it is automatically incremented after each page break.</para>
            <para>This property is read-write, so you can reset it using scripts. For example, you can reset the
            current page to 1 whenever a new group starts rendering.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Cancel">
            <summary>
            Specifies whether to cancel generation of the current report.
            </summary>
            <remarks>
            Setting this property to true while a report is being generated stops the report generation process.
            Any pages already created are kept in the document and can be previewed or printed by an attached
            print preview control.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.IsBusy">
            <summary>
            Gets a value that determines whether a report is currently being generated.
            </summary>
            <remarks>
            <para>Use this property to determine whether the control is currently busy generating a report.</para>
            <para>This property is especially useful when the <see cref="P:C1.Win.C1Report.C1Report.DoEvents"/> property is set to true. 
            In this case, the application continues to process user input while the control generates reports, 
            and there is a change that the user might try to start another report before the current one is done.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Tag">
            <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.ParentReport">
            <summary>
            Gets the main report that contains this subreport (null for main reports).
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Document">
            <summary>
            Gets a <see cref="T:System.Drawing.Printing.PrintDocument"/> object that can be used to render the report to a printer or 
            into a print preview control.
            </summary>
            <example>
            The examples below show how you can use the <see cref="P:C1.Win.C1Report.C1Report.Document"/> property to print the report 
            or show it in a <see cref="T:System.Windows.Forms.PrintPreviewDialog"/> control.
            <code>
            // print the report to the default printer
            _c1r.Document.Print();
            
            // show the report in a PrintPreviewDialog
            PrintPreviewDialog p = new PrintPreviewDialog():
            p.Document = _c1r.Document;
            p.ShowDialog();
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.PageImages">
            <summary>
            Gets a list of <see cref="T:System.Drawing.Imaging.Metafile"/> objects that correspond to the pages in the report.
            </summary>
            <remarks>
            Use the <see cref="M:C1.Win.C1Report.C1Report.Render"/> method to create or refresh the page images.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Groups">
            <summary>
            Gets a collection with all the groups in the report.
            </summary>
            <remarks>
            <para>The <b>Groups</b> collection contains all <see cref="T:C1.Win.C1Report.Group"/> objects defined in the current report.</para>
            <para>Removing a <b>Group</b> from the collection also removes its associated header and footer sections, as well 
            as any fields in those sections.</para>
            <para>Adding a <b>Group</b> to the collection adds the corresponding group header and footer sections to the report.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Sections">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1Report.Section"/> objects in the report definition.
            </summary>
            <remarks>
            This collection always contains at least five items, which correspond to the standard report 
            sections that are always present: Detail, Header, Footer, PageHeader, and PageFooter.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.Fields">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1Report.Field"/> objects in the report definition.
            </summary>
            <remarks>
            The <see cref="T:C1.Win.C1Report.Section"/> object also contains a collection of fields in that section.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.ReportDefinition">
            <summary>
            Gets or sets an Xml string containing the complete report definition.
            </summary>
            <remarks>
            This property can be used to store report definitions into databases, to place them in the clipboard, 
            or to copy reports from one <see cref="T:C1.Win.C1Report.C1Report"/> component to another.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.OutlineRootLevel">
            <summary>
            Gets or sets the starting outline level for the groups in this report.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.Win.C1Report.C1Report"/> creates an outline based on the report groups. 
            The outline starts at level zero, and is visible in PDF versions of the report.</para>
            <para>This property allows you to start the report at a custom level, which can be useful 
            if you are rendering multiple reports into a larger document (using C1PrintDocument for example).</para>
            <para>You can set this property to -1 to suppress the outline.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.LabelOffset">
            <summary>
            Gets or sets the position of the first label on a partially used sheet.
            </summary>
            <remarks>
            This property allows you to print labels on partially used label sheets. For example, 
            if you have a sheet with 12 labels and have already used 5, set the <b>LabelOffset</b> 
            property to 6 in order to skip the labels that have already been used.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.GrowShrinkMode">
            <summary>
            Gets or sets the method used to process CanGrow/CanShrink fields.
            </summary>
            <remarks>
            <para>If this property is set to <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report"/>, fields with 
            <see cref="P:C1.Win.C1Report.Field.CanGrow"/> or <see cref="P:C1.Win.C1Report.Field.CanShrink"/> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
            <para>If this property is set to <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.Access"/>, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior).</para>
            <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.Win.C1Report.C1Report.GrowShrinkMode"/> is set to 
            <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.Access"/>, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
            <para>If <see cref="P:C1.Win.C1Report.C1Report.GrowShrinkMode"/> is set to <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report"/>, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.UsePrinterResolution">
            <summary>
            Specifies whether the component should use the .NET printing support to obtain high-resolution graphics.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.Win.C1Report.C1Report"/> scans the installed printers in order to 
            obtain a high-resolution reference <see cref="T:System.Drawing.Graphics"/> object.</para>
            <para>Set this property to false in order to bypass this process and use the
            screen resolution when generating reports. This will increase report rendering
            speed (in some cases) with some loss in layout accuracy.</para>
            <para>Under certain circumstances, notably when running under Windows Services, 
            the .NET printing support does not work correctly, and trying to enumerate the 
            installed printers may cause memory allocation problems. In these situations,
            setting this property to false is necessary.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.C1Report.ReportList">
            <summary>
            This property is intended for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.C1Report.EditExpressionDelegate">
            <summary>
            Type of delegate used to specify custom handlers for script editors.
            </summary>
            <remarks>
            <para>When <see cref="T:C1.Win.C1Report.C1Report"/> component is used with a <see cref="T:System.Windows.Forms.PropertyGrid"/> 
            control, the property grid uses custom type editors to provide user interface elements 
            for editing scripts, statements, and data source properties.</para>
            <para>This delegate allows report designer applications to provide their own user 
            interface for editing these elements.</para>
            <para>For examples of how these delegates are used, please see the source code
            for the <b>C1ReportDesigner</b> application, included with the C1Report Designer
            Edition.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.C1Report.EditDataSourceDelegate">
            <summary>
            Type of delegate used to specify custom handlers for data source editors.
            </summary>
            <remarks>
            <para>When <see cref="T:C1.Win.C1Report.C1Report"/> component is used with a <see cref="T:System.Windows.Forms.PropertyGrid"/> 
            control, the property grid uses custom type editors to provide user interface elements 
            for editing scripts, statements, and data source properties.</para>
            <para>This delegate allows report designer applications to provide their own user 
            interface for editing these elements.</para>
            <para>For examples of how these delegates are used, please see the source code
            for the <b>C1ReportDesigner</b> application, included with the C1Report Designer
            Edition.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.ReportEventHandler">
            <summary>
            Represents the method that will handle <see cref="F:C1.Win.C1Report.C1Report.StartPage"/>, <see cref="F:C1.Win.C1Report.C1Report.EndPage"/>, 
            <see cref="F:C1.Win.C1Report.C1Report.StartSection"/>, <see cref="F:C1.Win.C1Report.C1Report.PrintSection"/>, <see cref="F:C1.Win.C1Report.C1Report.EndSection"/>,
            <see cref="F:C1.Win.C1Report.C1Report.ReportError"/>, and <see cref="F:C1.Win.C1Report.C1Report.AddOutlineEntry"/> events.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ReportEventArgs">
            <summary>
            Provides data for <see cref="F:C1.Win.C1Report.C1Report.StartPage"/>, <see cref="F:C1.Win.C1Report.C1Report.EndPage"/>, <see cref="F:C1.Win.C1Report.C1Report.StartSection"/>, 
            <see cref="F:C1.Win.C1Report.C1Report.PrintSection"/>, <see cref="F:C1.Win.C1Report.C1Report.EndSection"/>, <see cref="F:C1.Win.C1Report.C1Report.ReportError"/>, and
            <see cref="F:C1.Win.C1Report.C1Report.AddOutlineEntry"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ReportEventArgs.Page">
            <summary>
            The current page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ReportEventArgs.Section">
            <summary>
            The current section.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ReportEventArgs.Exception">
            <summary>
            <see cref="F:C1.Win.C1Report.ReportEventArgs.Exception"/> that caused the error.
            </summary>
            <remarks>
            This property is only used with the <see cref="F:C1.Win.C1Report.C1Report.ReportError"/> event.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.ReportEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the component should throw the <see cref="F:C1.Win.C1Report.ReportEventArgs.Exception"/> 
            that was detected or whether it should ignore the error and continue rendering the report.
            </summary>
            <remarks>
            This property is only used with the <see cref="F:C1.Win.C1Report.C1Report.ReportError"/> event.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.ReportEventArgs.Text">
            <summary>
            Gets or sets the text that will be used as an outline entry.
            </summary>
            <remarks>
            This property is only used with the <see cref="F:C1.Win.C1Report.C1Report.AddOutlineEntry"/> event.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.DialogEventHandler">
            <summary>
            Represents the method that will handle the <see cref="F:C1.Win.C1Report.C1Report.InitializeParametersDialog"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.DialogEventArgs">
            <summary>
            Provides data for <see cref="F:C1.Win.C1Report.C1Report.InitializeParametersDialog"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.DialogEventArgs.Dialog">
            <summary>
            Reference to a <see cref="T:C1.Win.C1Report.DialogEventArgs"/> that is about to be displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.DialogEventArgs.ShowDialog">
            <summary>
            Gets or sets a value that determines whether the component should display the parameters dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.DialogEventArgs.Parameters">
            <summary>
            Gets the collection of parameters defined by the report.
            </summary>
            <remarks>
            TODO
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.AddOutlineEntryHandler">
            <summary>
            Represents the method that will handle the <see cref="F:C1.Win.C1Report.C1Report.AddOutlineEntry"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ReportInfo">
            <summary>
            Class that contains report metadata.
            </summary>
            <remarks>
            <para>Reports may include general information such as a title, author, and keywords.</para>
            <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Report.ReportInfo.Clear">
            <summary>
            Clears the <see cref="T:C1.Win.C1Report.ReportInfo"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.ReportInfo.Clone">
            <summary>
            Returns a copy of this <see cref="T:C1.Win.C1Report.ReportInfo"/> object.
            </summary>
            <returns>A copy of this <see cref="T:C1.Win.C1Report.ReportInfo"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Report.ReportInfo.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:C1.Win.C1Report.ReportInfo"/> object.
            </summary>
            <returns>Returns a string that represents the current <see cref="T:C1.Win.C1Report.ReportInfo"/> object.</returns>
        </member>
        <member name="P:C1.Win.C1Report.ReportInfo.Author">
            <summary>
            Gets or sets the name of the person that created the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportInfo.Title">
            <summary>
            Gets or sets the title of the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportInfo.Subject">
            <summary>
            Gets or sets the subject of the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportInfo.Keywords">
            <summary>
            Gets or sets keywords associated with the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.ReportInfo.Creator">
            <summary>
            Gets or sets the name of the application that created the report.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ReportScript">
            <summary>
            ReportScript 
            extends the ScriptEngine class to recognizing the following custom objects:
            - database fields
            - report fields
            - custom variables: Page
            - custom functions: Sum, etc
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.SectionTypeEnum">
            <summary>
            Specifies the section type, which is equivalent to a the index of a <see cref="T:C1.Win.C1Report.Section"/> object
            in the control's <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection. 
            </summary>
            <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Field.Section"/> and 
            <see cref="P:C1.Win.C1Report.Section.Type"/> properties.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.Undefined">
            <summary>
            Undefined. When fields are created using the <see cref="M:C1.Win.C1Report.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)"/> method, 
            they don't belong to any sections and are not rendered with the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.Detail">
            <summary>
            Detail section: repeated for every record in the source recordset.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.Header">
            <summary>
            Report header section: appears once, in the beginning of the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.Footer">
            <summary>
            Report footer section: appears once, in the end of the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.PageHeader">
            <summary>
            Page header section: appears at the top of every page, subject to the setting of the 
            <see cref="P:C1.Win.C1Report.Layout.PageHeader"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.PageFooter">
            <summary>
            Page footer section: appears at the bottom of every page, subject to the setting of the 
            <see cref="P:C1.Win.C1Report.Layout.PageFooter"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader1">
            <summary>
            Group header section: appears before level-one groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter1">
            <summary>
            Group footer section: appears after level-one groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader2">
            <summary>
            Group header section: appears before level-two groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter2">
            <summary>
            Group footer section: appears after level-two groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader3">
            <summary>
            Group header section: appears before level-three groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter3">
            <summary>
            Group footer section: appears after level-three groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader4">
            <summary>
            Group header section: appears before level-four groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter4">
            <summary>
            Group footer section: appears after level-four groups.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.ForcePageBreakEnum">
            <summary>
            Determines whether page breaks should be inserted before or after a field or section.
            </summary>
            <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Field.ForcePageBreak"/> and 
            <see cref="P:C1.Win.C1Report.Section.ForcePageBreak"/> properties in the <see cref="T:C1.Win.C1Report.Field"/> and <see cref="T:C1.Win.C1Report.Section"/> classes.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Report.ForcePageBreakEnum.None">
            <summary>
            No page breaks.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ForcePageBreakEnum.Before">
            <summary>
            A page break is inserted before the field or section.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ForcePageBreakEnum.After">
            <summary>
            A page break is inserted after the field or section.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ForcePageBreakEnum.BeforeAndAfter">
            <summary>
            Page breaks are inserted before and after the field or section.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ForcePageBreakEnum.PageBefore">
            <summary>
            In multi-column reports, a page break is inserted before the field or section instead of column break.
            </summary>
        </member>
        <member name="F:C1.Win.C1Report.ForcePageBreakEnum.PageAfter">
            <summary>
            In multi-column reports, a page break is inserted after the field or section instead of column break.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Section">
            <summary>
            Represents a report band.
            </summary>
            <remarks>
            <para>Each <b>Section</b> object contains a collection of fields objects that display individual data items 
            within the section.</para>
            <para>Every report contains the following sections:</para>
            <para>A <b>detail</b> section.</para>
            <para>A <b>report header</b> and a <b>report footer</b> section.</para>
            <para>A <b>page header</b> and a <b>page footer</b> section.</para>
            <para>A <b>group header</b> and a <b>group footer</b> section for each <see cref="T:C1.Win.C1Report.Group"/> object in the report.</para>
            <para>The total number of sections in a report is therefore <code>5 + 2 * Groups.Count</code>. Sections cannot
            be added and removed from reports directly. The number of sections is a function of the number of groups.</para>
            <para>Although sections cannot be removed, they can be hidden by setting their <see cref="P:C1.Win.C1Report.Section.Visible"/> property
            to false.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.Name">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Report.Section"/> name.
            </summary>
            <remarks>
            <para>The section name can be used as an index into the control's <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.</para>
            <para>Section names are also used to identify fields in <b>VBScript</b> expressions.</para>
            <para>Duplicate and empty section names are allowed, but should be avoided if you plan to use the section names 
            in scripts or as indexers.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.Visible">
            <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section"/> will be rendered in the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Section.Type">
            <summary>
            Returns the <see cref="T:C1.Win.C1Report.Section"/> type (e.g., PageHeader, Detail).
            </summary>
            <seealso cref="T:C1.Win.C1Report.SectionTypeEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Section.Fields">
            <summary>
            Returns a collection of all fields in this <see cref="T:C1.Win.C1Report.Section"/>.
            </summary>
            <remarks>
            <para>The <b>Fields</b> collection contains all <see cref="T:C1.Win.C1Report.Field"/> objects defined in the current section.</para>
            <para>When you add a field to a section's <b>Fields</b> collection, the field is automatically assigned to the 
            section that owns the collection. For example, the code below adds a field to the <b>Detail</b> section:</para>
            <code>
            _c1r.Sections.Detail.Fields.Add("new field", "CompanyLogo", rc);
            </code>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.Tag">
            <summary>
            Gets or sets extra data used by the calling program.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Section.ParentReport">
            <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report"/> object that contains this <see cref="T:C1.Win.C1Report.Section"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Section.Height">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Report.Section"/> height, in twips.
            </summary>
            <remarks>
            <para>The height of a section should be large enough to accommodate all fields in the section.</para>
            <para>The Report Designer automatically adjusts section heights when fields are added, moved, or resized.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.RenderHeight">
            <summary>
            Returns the height of the section after the <see cref="P:C1.Win.C1Report.Section.CanGrow"/> and <see cref="P:C1.Win.C1Report.Section.CanShrink"/> 
            properties have been applied to the section.
            </summary>
            <remarks>
            <para>When a section grows or shrinks, its <see cref="P:C1.Win.C1Report.Section.Height"/> property does not change.</para>
            <para>If you need to retrieve the actual height that will be used for rendering the section 
            (for example, while handling the <see cref="P:C1.Win.C1Report.Section.OnPrint"/> event), use the <see cref="P:C1.Win.C1Report.Section.RenderHeight"/> 
            property instead.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.KeepTogether">
            <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section"/> should be kept together on a page.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1Report.Group"/> and <see cref="T:C1.Win.C1Report.Field"/> objects also have <b>KeepTogether</b> properties.</para>
            <para>The <see cref="T:C1.Win.C1Report.Group"/> object's <see cref="P:C1.Win.C1Report.Group.KeepTogether"/> property works across sections. 
            It determines whether group headers should be kept together with their first detail section or whether entire 
            groups should be kept together on a page.</para>
            <para>The <see cref="T:C1.Win.C1Report.Field"/> object's <see cref="P:C1.Win.C1Report.Field.KeepTogether"/> property determines whether the
            field should be rendered on a single page or whether it is allowed to be split across page breaks.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.ForcePageBreak">
            <summary>
            Specifies whether page breaks should be inserted before and/or after the section is rendered.
            </summary>
            <seealso cref="T:C1.Win.C1Report.ForcePageBreakEnum"/>
        </member>
        <member name="P:C1.Win.C1Report.Section.CanGrow">
            <summary>
            Specifies whether the Section height should be automatically increased to fit its contents.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.Win.C1Report.Section.CanGrow"/> and <see cref="P:C1.Win.C1Report.Section.CanShrink"/> properties to control the 
            appearance of report sections and fields.</para>
            <para>For example, if you set both properties to true, a section or field automatically adjusts 
            vertically to print or preview all the data it contains.</para>
            <para>Sections grow and shrink vertically across their entire width.</para>
            <para>When a section grows or shrinks, its <see cref="P:C1.Win.C1Report.Section.Height"/> property does not change. 
            To retrieve the actual rendering height, use the <see cref="P:C1.Win.C1Report.Section.RenderHeight"/> property.</para>
            <para>You can make fields grow or shrink to match the size of the section by setting their 
            <see cref="P:C1.Win.C1Report.Field.Anchor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.CanShrink">
            <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section"/> height should be reduced when one or more fields shrink.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.Win.C1Report.Section.CanGrow"/> and <see cref="P:C1.Win.C1Report.Section.CanShrink"/> properties to control the layout of 
            report sections and fields.</para>
            <para>For example, if you set both properties to true, a section or field automatically adjusts vertically 
            to print or preview all the data it contains.</para>
            <para>When a section grows or shrinks, its <see cref="P:C1.Win.C1Report.Section.Height"/> property does not change. To retrieve the 
            actual (adjusted) height, use the <see cref="P:C1.Win.C1Report.Section.RenderHeight"/> property.</para>
            <para>You can make fields grow or shrink to match the size of the section by setting their <see cref="P:C1.Win.C1Report.Field.Anchor"/> 
            property.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1Report.Section.CanGrow"/>
        </member>
        <member name="P:C1.Win.C1Report.Section.Repeat">
            <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section"/> should be repeated at the top of every page.
            </summary>
            <remarks>
            <para>This property only applies to group header sections.</para>
            <para>Set this value to true to repeat the group header page at the top of every page, before the detail sections.</para>
            <para>If you have multiple groups, all group header sections that have the <b>Repeat</b> property set to true will 
            be rendered at the top of each page.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.BackColor">
            <summary>
            Gets or sets the background color for this <see cref="T:C1.Win.C1Report.Section"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.Section.OnFormat">
            <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.Win.C1Report.Section"/> is formatted.
            </summary>
            <remarks>
            <para>This property contains <b>VBScript</b> instructions to be executed before the fields in the section 
            are calculated. When this script is executed, the recordset already holds the data that will be displayed 
            in the section, but the field values have not been updated yet.</para>
            <para>Use this event to assign values to fields before they are calculated, so the new values will be taken 
            into account when the control calculates the field's size and position when the <see cref="P:C1.Win.C1Report.Section.CanGrow"/> or 
            <see cref="P:C1.Win.C1Report.Section.CanShrink"/> properties are set to true.</para>
            <para>If you want to set field properties based on the field's current value, use the <see cref="P:C1.Win.C1Report.Section.OnPrint"/> 
            property instead.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.Section.OnPrint">
            <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.Win.C1Report.Section"/> is printed 
            (after it is formatted).
            </summary>
            <remarks>
            This property contains <b>VBScript</b> instructions that get executed after the fields in the section 
            have been calculated.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Report.SectionCollection">
            <summary>
            Collection of the <see cref="T:C1.Win.C1Report.Section"/> objects. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Report.SectionCollection.CopyTo(C1.Win.C1Report.Section[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements 
            copied from collection. (The array must have zero-based indexing).</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:C1.Win.C1Report.SectionCollection.Contains(C1.Win.C1Report.Section)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:C1.Win.C1Report.Section"/>.
            </summary>
            <param name="s">The <see cref="T:C1.Win.C1Report.Section"/> object.</param>
            <returns>True if the collection contains specified section; false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Item(System.Int32)">
            <summary>
            Returns a section from a <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.
            </summary>
            <remarks>
            The index parameter may be an integer between zero and <see cref="P:C1.Win.C1Report.SectionCollection.Count"/>-1.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Item(C1.Win.C1Report.SectionTypeEnum)">
            <summary>
            Returns a section from a <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Item(System.String)">
            <summary>
            Returns a section from a <see cref="P:C1.Win.C1Report.C1Report.Sections"/> collection.
            </summary>
            <remarks>
            The name parameter may be a string containing a section name.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Detail">
            <summary>
            Returns a reference to the detail section of the report. 
            </summary>
            <remarks>
            This property is equivalent to this[SectionTypeEnum.Detail].
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Header">
            <summary>
            Returns a reference to the report header section. 
            </summary>
            <remarks>
            This property is equivalent to this[SectionTypeEnum.Header]
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Footer">
            <summary>
            Returns a reference to the report footer section. 
            </summary>
            <remarks>
            This property is equivalent to this[SectionTypeEnum.Footer].
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.PageHeader">
            <summary>
            Returns a reference to the page header section of the report. 
            </summary>
            <remarks>
            This property is equivalent to this[SectionTypeEnum.PageHeader].
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.PageFooter">
            <summary>
            Returns a reference to the page footer section of the report. 
            </summary>
            <remarks>
            This property is equivalent to this[SectionTypeEnum.PageFooter].
            </remarks>
        </member>
        <member name="P:C1.Win.C1Report.SectionCollection.Count">
            <summary>
            Returns the number of elements in the collection.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1Report.SectionCollection"/> class does not have <b>Add</b> or <b>Remove</b> methods.</para>
            <para>That is because the number of sections in a report is determined by then number of groups. 
            To add or remove sections from the report, you need to add or remove groups.</para>
            </remarks>
        </member>
    </members>
</doc>
